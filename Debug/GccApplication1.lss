
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c0  00800060  000020de  00002172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800220  00800220  00002332  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d61  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082c  00000000  00000000  00004235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1a  00000000  00000000  00004a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  0000567c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  000059c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001116  00000000  00000000  00005eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006fc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__vector_1>
       8:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__vector_2>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <Soil+0x1e>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__trampolines_end>:
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	7a 10       	cpse	r7, r10
      da:	f3 5a       	subi	r31, 0xA3	; 163
      dc:	00 a0       	ldd	r0, Z+32	; 0x20
      de:	72 4e       	sbci	r23, 0xE2	; 226
      e0:	18 09       	sbc	r17, r8
      e2:	00 10       	cpse	r0, r0
      e4:	a5 d4       	rcall	.+2378   	; 0xa30 <pH+0x50>
      e6:	e8 00       	.word	0x00e8	; ????
      e8:	00 e8       	ldi	r16, 0x80	; 128
      ea:	76 48       	sbci	r23, 0x86	; 134
      ec:	17 00       	.word	0x0017	; ????
      ee:	00 e4       	ldi	r16, 0x40	; 64
      f0:	0b 54       	subi	r16, 0x4B	; 75
      f2:	02 00       	.word	0x0002	; ????
      f4:	00 ca       	rjmp	.-3072   	; 0xfffff4f6 <__eeprom_end+0xff7ef4f6>
      f6:	9a 3b       	cpi	r25, 0xBA	; 186
      f8:	00 00       	nop
      fa:	00 e1       	ldi	r16, 0x10	; 16
      fc:	f5 05       	cpc	r31, r5
      fe:	00 00       	nop
     100:	80 96       	adiw	r24, 0x20	; 32
     102:	98 00       	.word	0x0098	; ????
     104:	00 00       	nop
     106:	40 42       	sbci	r20, 0x20	; 32
     108:	0f 00       	.word	0x000f	; ????
     10a:	00 00       	nop
     10c:	a0 86       	std	Z+8, r10	; 0x08
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	10 27       	eor	r17, r16
     114:	00 00       	nop
     116:	00 00       	nop
     118:	e8 03       	fmulsu	r22, r16
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	64 00       	.word	0x0064	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	0a 00       	.word	0x000a	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	01 00       	.word	0x0001	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	2c 76       	andi	r18, 0x6C	; 108
     132:	d8 88       	ldd	r13, Y+16	; 0x10
     134:	dc 67       	ori	r29, 0x7C	; 124
     136:	4f 08       	sbc	r4, r15
     138:	23 df       	rcall	.-442    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     13a:	c1 df       	rcall	.-126    	; 0xbe <__SREG__+0x7f>
     13c:	ae 59       	subi	r26, 0x9E	; 158
     13e:	e1 b1       	in	r30, 0x01	; 1
     140:	b7 96       	adiw	r30, 0x27	; 39
     142:	e5 e3       	ldi	r30, 0x35	; 53
     144:	e4 53       	subi	r30, 0x34	; 52
     146:	c6 3a       	cpi	r28, 0xA6	; 166
     148:	e6 51       	subi	r30, 0x16	; 22
     14a:	99 76       	andi	r25, 0x69	; 105
     14c:	96 e8       	ldi	r25, 0x86	; 134
     14e:	e6 c2       	rjmp	.+1484   	; 0x71c <ADC_Init+0x4>
     150:	84 26       	eor	r8, r20
     152:	eb 89       	ldd	r30, Y+19	; 0x13
     154:	8c 9b       	sbis	0x11, 4	; 17
     156:	62 ed       	ldi	r22, 0xD2	; 210
     158:	40 7c       	andi	r20, 0xC0	; 192
     15a:	6f fc       	.word	0xfc6f	; ????
     15c:	ef bc       	out	0x2f, r14	; 47
     15e:	9c 9f       	mul	r25, r28
     160:	40 f2       	brcs	.-112    	; 0xf2 <__trampolines_end+0x1c>
     162:	ba a5       	ldd	r27, Y+42	; 0x2a
     164:	6f a5       	ldd	r22, Y+47	; 0x2f
     166:	f4 90       	lpm	r15, Z
     168:	05 5a       	subi	r16, 0xA5	; 165
     16a:	2a f7       	brpl	.-54     	; 0x136 <__trampolines_end+0x60>
     16c:	5c 93       	st	X, r21
     16e:	6b 6c       	ori	r22, 0xCB	; 203
     170:	f9 67       	ori	r31, 0x79	; 121
     172:	6d c1       	rjmp	.+730    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     174:	1b fc       	.word	0xfc1b	; ????
     176:	e0 e4       	ldi	r30, 0x40	; 64
     178:	0d 47       	sbci	r16, 0x7D	; 125
     17a:	fe f5       	brtc	.+126    	; 0x1fa <.do_clear_bss_loop>
     17c:	20 e6       	ldi	r18, 0x60	; 96
     17e:	b5 00       	.word	0x00b5	; ????
     180:	d0 ed       	ldi	r29, 0xD0	; 208
     182:	90 2e       	mov	r9, r16
     184:	03 00       	.word	0x0003	; ????
     186:	94 35       	cpi	r25, 0x54	; 84
     188:	77 05       	cpc	r23, r7
     18a:	00 80       	ld	r0, Z
     18c:	84 1e       	adc	r8, r20
     18e:	08 00       	.word	0x0008	; ????
     190:	00 20       	and	r0, r0
     192:	4e 0a       	sbc	r4, r30
     194:	00 00       	nop
     196:	00 c8       	rjmp	.-4096   	; 0xfffff198 <__eeprom_end+0xff7ef198>
     198:	0c 33       	cpi	r16, 0x3C	; 60
     19a:	33 33       	cpi	r19, 0x33	; 51
     19c:	33 0f       	add	r19, r19
     19e:	98 6e       	ori	r25, 0xE8	; 232
     1a0:	12 83       	std	Z+2, r17	; 0x02
     1a2:	11 41       	sbci	r17, 0x11	; 17
     1a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a6:	21 14       	cp	r2, r1
     1a8:	89 3b       	cpi	r24, 0xB9	; 185
     1aa:	e6 55       	subi	r30, 0x56	; 86
     1ac:	16 cf       	rjmp	.-468    	; 0xffffffda <__eeprom_end+0xff7effda>
     1ae:	fe e6       	ldi	r31, 0x6E	; 110
     1b0:	db 18       	sub	r13, r11
     1b2:	d1 84       	ldd	r13, Z+9	; 0x09
     1b4:	4b 38       	cpi	r20, 0x8B	; 139
     1b6:	1b f7       	brvc	.-58     	; 0x17e <__trampolines_end+0xa8>
     1b8:	7c 1d       	adc	r23, r12
     1ba:	90 1d       	adc	r25, r0
     1bc:	a4 bb       	out	0x14, r26	; 20
     1be:	e4 24       	eor	r14, r4
     1c0:	20 32       	cpi	r18, 0x20	; 32
     1c2:	84 72       	andi	r24, 0x24	; 36
     1c4:	5e 22       	and	r5, r30
     1c6:	81 00       	.word	0x0081	; ????
     1c8:	c9 f1       	breq	.+114    	; 0x23c <LCD_Command+0x2e>
     1ca:	24 ec       	ldi	r18, 0xC4	; 196
     1cc:	a1 e5       	ldi	r26, 0x51	; 81
     1ce:	3d 27       	eor	r19, r29

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf e5       	ldi	r28, 0x5F	; 95
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	12 e0       	ldi	r17, 0x02	; 2
     1de:	a0 e6       	ldi	r26, 0x60	; 96
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	ee ed       	ldi	r30, 0xDE	; 222
     1e4:	f0 e2       	ldi	r31, 0x20	; 32
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x10>
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	a0 32       	cpi	r26, 0x20	; 32
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0xc>

000001f2 <__do_clear_bss>:
     1f2:	22 e0       	ldi	r18, 0x02	; 2
     1f4:	a0 e2       	ldi	r26, 0x20	; 32
     1f6:	b2 e0       	ldi	r27, 0x02	; 2
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a9 33       	cpi	r26, 0x39	; 57
     1fe:	b2 07       	cpc	r27, r18
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 16 07 	call	0xe2c	; 0xe2c <main>
     206:	0c 94 6d 10 	jmp	0x20da	; 0x20da <_exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <LCD_Command>:
#define RS PD0				/* Define Register Select pin */
#define EN PD1 				/* Define Enable signal pin */

void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
     20e:	92 b3       	in	r25, 0x12	; 18
     210:	9f 70       	andi	r25, 0x0F	; 15
     212:	28 2f       	mov	r18, r24
     214:	20 7f       	andi	r18, 0xF0	; 240
     216:	92 2b       	or	r25, r18
     218:	92 bb       	out	0x12, r25	; 18
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
     21a:	92 b3       	in	r25, 0x12	; 18
     21c:	9e 7f       	andi	r25, 0xFE	; 254
     21e:	92 bb       	out	0x12, r25	; 18
	LCD_Port |= (1<<EN);		/* Enable pulse */
     220:	92 b3       	in	r25, 0x12	; 18
     222:	92 60       	ori	r25, 0x02	; 2
     224:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Command+0x1a>
     228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_Command+0x1c>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     22a:	92 b3       	in	r25, 0x12	; 18
     22c:	9d 7f       	andi	r25, 0xFD	; 253
     22e:	92 bb       	out	0x12, r25	; 18
     230:	e7 ec       	ldi	r30, 0xC7	; 199
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <LCD_Command+0x26>
     238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_Command+0x2c>
     23a:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
     23c:	22 b3       	in	r18, 0x12	; 18
     23e:	f0 e1       	ldi	r31, 0x10	; 16
     240:	8f 9f       	mul	r24, r31
     242:	c0 01       	movw	r24, r0
     244:	11 24       	eor	r1, r1
     246:	92 2f       	mov	r25, r18
     248:	9f 70       	andi	r25, 0x0F	; 15
     24a:	89 2b       	or	r24, r25
     24c:	82 bb       	out	0x12, r24	; 18
	LCD_Port |= (1<<EN);
     24e:	82 b3       	in	r24, 0x12	; 18
     250:	82 60       	ori	r24, 0x02	; 2
     252:	82 bb       	out	0x12, r24	; 18
     254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Command+0x48>
     256:	00 c0       	rjmp	.+0      	; 0x258 <LCD_Command+0x4a>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     258:	82 b3       	in	r24, 0x12	; 18
     25a:	8d 7f       	andi	r24, 0xFD	; 253
     25c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25e:	8f ec       	ldi	r24, 0xCF	; 207
     260:	97 e0       	ldi	r25, 0x07	; 7
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <LCD_Command+0x54>
     266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_Command+0x5a>
     268:	00 00       	nop
     26a:	08 95       	ret

0000026c <LCD_Char>:
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
     26c:	92 b3       	in	r25, 0x12	; 18
     26e:	9f 70       	andi	r25, 0x0F	; 15
     270:	28 2f       	mov	r18, r24
     272:	20 7f       	andi	r18, 0xF0	; 240
     274:	92 2b       	or	r25, r18
     276:	92 bb       	out	0x12, r25	; 18
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
     278:	92 b3       	in	r25, 0x12	; 18
     27a:	91 60       	ori	r25, 0x01	; 1
     27c:	92 bb       	out	0x12, r25	; 18
	LCD_Port|= (1<<EN);
     27e:	92 b3       	in	r25, 0x12	; 18
     280:	92 60       	ori	r25, 0x02	; 2
     282:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_Char+0x1a>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Char+0x1c>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     288:	92 b3       	in	r25, 0x12	; 18
     28a:	9d 7f       	andi	r25, 0xFD	; 253
     28c:	92 bb       	out	0x12, r25	; 18
     28e:	e7 ec       	ldi	r30, 0xC7	; 199
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <LCD_Char+0x26>
     296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_Char+0x2c>
     298:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
     29a:	22 b3       	in	r18, 0x12	; 18
     29c:	f0 e1       	ldi	r31, 0x10	; 16
     29e:	8f 9f       	mul	r24, r31
     2a0:	c0 01       	movw	r24, r0
     2a2:	11 24       	eor	r1, r1
     2a4:	92 2f       	mov	r25, r18
     2a6:	9f 70       	andi	r25, 0x0F	; 15
     2a8:	89 2b       	or	r24, r25
     2aa:	82 bb       	out	0x12, r24	; 18
	LCD_Port |= (1<<EN);
     2ac:	82 b3       	in	r24, 0x12	; 18
     2ae:	82 60       	ori	r24, 0x02	; 2
     2b0:	82 bb       	out	0x12, r24	; 18
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_Char+0x48>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_Char+0x4a>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     2b6:	82 b3       	in	r24, 0x12	; 18
     2b8:	8d 7f       	andi	r24, 0xFD	; 253
     2ba:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2bc:	8f ec       	ldi	r24, 0xCF	; 207
     2be:	97 e0       	ldi	r25, 0x07	; 7
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_Char+0x54>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_Char+0x5a>
     2c6:	00 00       	nop
     2c8:	08 95       	ret

000002ca <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xCF;			/* Make LCD port direction as o/p */
     2ca:	8f ec       	ldi	r24, 0xCF	; 207
     2cc:	81 bb       	out	0x11, r24	; 17
     2ce:	8f e1       	ldi	r24, 0x1F	; 31
     2d0:	9e e4       	ldi	r25, 0x4E	; 78
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_Init+0x8>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_Init+0xe>
     2d8:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
     2e0:	88 e2       	ldi	r24, 0x28	; 40
     2e2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
     2e6:	8c e0       	ldi	r24, 0x0C	; 12
     2e8:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
     2ec:	86 e0       	ldi	r24, 0x06	; 6
     2ee:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
     2f8:	8f ec       	ldi	r24, 0xCF	; 207
     2fa:	97 e0       	ldi	r25, 0x07	; 7
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_Init+0x32>
     300:	00 c0       	rjmp	.+0      	; 0x302 <LCD_Init+0x38>
     302:	00 00       	nop
     304:	08 95       	ret

00000306 <LCD_String_xy>:
	_delay_ms(2);
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	8a 01       	movw	r16, r20
	if (row == 0 && pos<16)
     310:	81 11       	cpse	r24, r1
     312:	08 c0       	rjmp	.+16     	; 0x324 <LCD_String_xy+0x1e>
     314:	60 31       	cpi	r22, 0x10	; 16
     316:	30 f4       	brcc	.+12     	; 0x324 <LCD_String_xy+0x1e>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
     318:	86 2f       	mov	r24, r22
     31a:	8f 70       	andi	r24, 0x0F	; 15
     31c:	80 68       	ori	r24, 0x80	; 128
     31e:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
     322:	09 c0       	rjmp	.+18     	; 0x336 <LCD_String_xy+0x30>
	else if (row == 1 && pos<16)
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	39 f4       	brne	.+14     	; 0x336 <LCD_String_xy+0x30>
     328:	60 31       	cpi	r22, 0x10	; 16
     32a:	28 f4       	brcc	.+10     	; 0x336 <LCD_String_xy+0x30>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of second row and required position<16 */
     32c:	86 2f       	mov	r24, r22
     32e:	8f 70       	andi	r24, 0x0F	; 15
     330:	80 6c       	ori	r24, 0xC0	; 192
     332:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
	_delay_ms(2);
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
     336:	c0 e0       	ldi	r28, 0x00	; 0
     338:	d0 e0       	ldi	r29, 0x00	; 0
     33a:	03 c0       	rjmp	.+6      	; 0x342 <LCD_String_xy+0x3c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of second row and required position<16 */
	
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
     33c:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_Char>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of second row and required position<16 */
	
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     340:	21 96       	adiw	r28, 0x01	; 1
     342:	f8 01       	movw	r30, r16
     344:	ec 0f       	add	r30, r28
     346:	fd 1f       	adc	r31, r29
     348:	80 81       	ld	r24, Z
     34a:	81 11       	cpse	r24, r1
     34c:	f7 cf       	rjmp	.-18     	; 0x33c <LCD_String_xy+0x36>
	{
		LCD_Char (str[i]);
	}
}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	08 95       	ret

00000358 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
     35e:	8f ec       	ldi	r24, 0xCF	; 207
     360:	97 e0       	ldi	r25, 0x07	; 7
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <LCD_Clear+0xa>
     366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_Clear+0x10>
     368:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
     36a:	80 e8       	ldi	r24, 0x80	; 128
     36c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
     370:	08 95       	ret

00000372 <keyINT_Enable>:
     372:	2f e7       	ldi	r18, 0x7F	; 127
     374:	89 ea       	ldi	r24, 0xA9	; 169
     376:	93 e0       	ldi	r25, 0x03	; 3
     378:	21 50       	subi	r18, 0x01	; 1
     37a:	80 40       	sbci	r24, 0x00	; 0
     37c:	90 40       	sbci	r25, 0x00	; 0
     37e:	e1 f7       	brne	.-8      	; 0x378 <keyINT_Enable+0x6>
     380:	00 c0       	rjmp	.+0      	; 0x382 <keyINT_Enable+0x10>
     382:	00 00       	nop

////////////keypad
void keyINT_Enable()
{
	_delay_ms(300);
	DDRC = 0x01;		//keypad interrupt enable
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFE;
     388:	8e ef       	ldi	r24, 0xFE	; 254
     38a:	85 bb       	out	0x15, r24	; 21
     38c:	08 95       	ret

0000038e <keycheck>:

#include <math.h>

int keycheck()
{	
	DDRC=0b11110000;
     38e:	80 ef       	ldi	r24, 0xF0	; 240
     390:	84 bb       	out	0x14, r24	; 20
	
	while(1)
	{
		PORTC=0b1101111;
     392:	8f e6       	ldi	r24, 0x6F	; 111
     394:	85 bb       	out	0x15, r24	; 21
     396:	8f e0       	ldi	r24, 0x0F	; 15
     398:	97 e2       	ldi	r25, 0x27	; 39
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <keycheck+0xc>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <keycheck+0x12>
     3a0:	00 00       	nop
		_delay_ms(10);

		switch(PINC)
     3a2:	83 b3       	in	r24, 0x13	; 19
     3a4:	8b 36       	cpi	r24, 0x6B	; 107
     3a6:	61 f0       	breq	.+24     	; 0x3c0 <keycheck+0x32>
     3a8:	18 f4       	brcc	.+6      	; 0x3b0 <keycheck+0x22>
     3aa:	87 36       	cpi	r24, 0x67	; 103
     3ac:	61 f0       	breq	.+24     	; 0x3c6 <keycheck+0x38>
     3ae:	0e c0       	rjmp	.+28     	; 0x3cc <keycheck+0x3e>
     3b0:	8d 36       	cpi	r24, 0x6D	; 109
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <keycheck+0x28>
     3b4:	44 c0       	rjmp	.+136    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     3b6:	8e 36       	cpi	r24, 0x6E	; 110
     3b8:	49 f4       	brne	.+18     	; 0x3cc <keycheck+0x3e>
		{
			case 0b1101110:return 1;break;
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	08 95       	ret
			case 0b1101101:return 4;break;
			case 0b1101011:return 7;break;
     3c0:	87 e0       	ldi	r24, 0x07	; 7
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	08 95       	ret
			case 0b1100111:return 19;break;
     3c6:	83 e1       	ldi	r24, 0x13	; 19
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	08 95       	ret
		}

		PORTC=0b1011111;
     3cc:	8f e5       	ldi	r24, 0x5F	; 95
     3ce:	85 bb       	out	0x15, r24	; 21
     3d0:	8f e0       	ldi	r24, 0x0F	; 15
     3d2:	97 e2       	ldi	r25, 0x27	; 39
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <keycheck+0x46>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <keycheck+0x4c>
     3da:	00 00       	nop
		_delay_ms(10);

		switch(PINC)
     3dc:	83 b3       	in	r24, 0x13	; 19
     3de:	8b 35       	cpi	r24, 0x5B	; 91
     3e0:	59 f0       	breq	.+22     	; 0x3f8 <keycheck+0x6a>
     3e2:	18 f4       	brcc	.+6      	; 0x3ea <keycheck+0x5c>
     3e4:	87 35       	cpi	r24, 0x57	; 87
     3e6:	59 f0       	breq	.+22     	; 0x3fe <keycheck+0x70>
     3e8:	0d c0       	rjmp	.+26     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3ea:	8d 35       	cpi	r24, 0x5D	; 93
     3ec:	59 f1       	breq	.+86     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     3ee:	8e 35       	cpi	r24, 0x5E	; 94
     3f0:	49 f4       	brne	.+18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			case 0b1011110:return 2;break;
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	08 95       	ret
			case 0b1011101:return 5;break;
			case 0b1011011:return 8;break;
     3f8:	88 e0       	ldi	r24, 0x08	; 8
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	08 95       	ret
			case 0b1010111:return 0;break;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	08 95       	ret
		}
		
		PORTC=0b0111111;
     404:	8f e3       	ldi	r24, 0x3F	; 63
     406:	85 bb       	out	0x15, r24	; 21
     408:	8f e0       	ldi	r24, 0x0F	; 15
     40a:	97 e2       	ldi	r25, 0x27	; 39
     40c:	01 97       	sbiw	r24, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     412:	00 00       	nop
		_delay_ms(10);

		switch(PINC)
     414:	83 b3       	in	r24, 0x13	; 19
     416:	8b 33       	cpi	r24, 0x3B	; 59
     418:	61 f0       	breq	.+24     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     41a:	18 f4       	brcc	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     41c:	87 33       	cpi	r24, 0x37	; 55
     41e:	61 f0       	breq	.+24     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     420:	b8 cf       	rjmp	.-144    	; 0x392 <keycheck+0x4>
     422:	8d 33       	cpi	r24, 0x3D	; 61
     424:	91 f0       	breq	.+36     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     426:	8e 33       	cpi	r24, 0x3E	; 62
     428:	09 f0       	breq	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     42a:	b3 cf       	rjmp	.-154    	; 0x392 <keycheck+0x4>
		{
			case 0b0111110:return 3;break;
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	08 95       	ret
			case 0b0111101:return 6;break;
			case 0b0111011:return 9;break;
     432:	89 e0       	ldi	r24, 0x09	; 9
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	08 95       	ret
			case 0b0110111:return 99;break;
     438:	83 e6       	ldi	r24, 0x63	; 99
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	08 95       	ret
		_delay_ms(10);

		switch(PINC)
		{
			case 0b1101110:return 1;break;
			case 0b1101101:return 4;break;
     43e:	84 e0       	ldi	r24, 0x04	; 4
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	08 95       	ret
		_delay_ms(10);

		switch(PINC)
		{
			case 0b1011110:return 2;break;
			case 0b1011101:return 5;break;
     444:	85 e0       	ldi	r24, 0x05	; 5
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	08 95       	ret
		_delay_ms(10);

		switch(PINC)
		{
			case 0b0111110:return 3;break;
			case 0b0111101:return 6;break;
     44a:	86 e0       	ldi	r24, 0x06	; 6
     44c:	90 e0       	ldi	r25, 0x00	; 0
			case 0b0111011:return 9;break;
			case 0b0110111:return 99;break;
		}
	}
}
     44e:	08 95       	ret

00000450 <keyValue>:

int i,keyVal,j;
int key[3];

int keyValue()
{
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
	i=0,keyVal=0,j=0;
     464:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <i+0x1>
     468:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <i>
     46c:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <keyVal+0x1>
     470:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <keyVal>
     474:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <j+0x1>
     478:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <j>
		
	LCD_Command(0xCC);
     47c:	8c ec       	ldi	r24, 0xCC	; 204
     47e:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
	while(1)
	{
		key[i]=keycheck();
     482:	c0 91 2a 02 	lds	r28, 0x022A	; 0x80022a <i>
     486:	d0 91 2b 02 	lds	r29, 0x022B	; 0x80022b <i+0x1>
     48a:	0e 94 c7 01 	call	0x38e	; 0x38e <keycheck>
     48e:	cc 0f       	add	r28, r28
     490:	dd 1f       	adc	r29, r29
     492:	c4 5d       	subi	r28, 0xD4	; 212
     494:	dd 4f       	sbci	r29, 0xFD	; 253
     496:	99 83       	std	Y+1, r25	; 0x01
     498:	88 83       	st	Y, r24
		if (key[i]==99) break;
     49a:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <i>
     49e:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <i+0x1>
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	e4 5d       	subi	r30, 0xD4	; 212
     4a8:	fd 4f       	sbci	r31, 0xFD	; 253
     4aa:	80 81       	ld	r24, Z
     4ac:	91 81       	ldd	r25, Z+1	; 0x01
     4ae:	83 36       	cpi	r24, 0x63	; 99
     4b0:	91 05       	cpc	r25, r1
     4b2:	b1 f0       	breq	.+44     	; 0x4e0 <keyValue+0x90>
		LCD_Char(key[i]+48);
     4b4:	80 5d       	subi	r24, 0xD0	; 208
     4b6:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_Char>
		i++;
     4ba:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <i>
     4be:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <i+0x1>
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <i+0x1>
     4c8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <i>
     4cc:	2f ef       	ldi	r18, 0xFF	; 255
     4ce:	81 ee       	ldi	r24, 0xE1	; 225
     4d0:	94 e0       	ldi	r25, 0x04	; 4
     4d2:	21 50       	subi	r18, 0x01	; 1
     4d4:	80 40       	sbci	r24, 0x00	; 0
     4d6:	90 40       	sbci	r25, 0x00	; 0
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <keyValue+0x82>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <keyValue+0x8c>
     4dc:	00 00       	nop
     4de:	d1 cf       	rjmp	.-94     	; 0x482 <keyValue+0x32>
		_delay_ms(400);
	}
	keyINT_Enable();
     4e0:	0e 94 b9 01 	call	0x372	; 0x372 <keyINT_Enable>
	
	while(1)
	{
		i--;
     4e4:	c0 91 2a 02 	lds	r28, 0x022A	; 0x80022a <i>
     4e8:	d0 91 2b 02 	lds	r29, 0x022B	; 0x80022b <i+0x1>
     4ec:	21 97       	sbiw	r28, 0x01	; 1
     4ee:	d0 93 2b 02 	sts	0x022B, r29	; 0x80022b <i+0x1>
     4f2:	c0 93 2a 02 	sts	0x022A, r28	; 0x80022a <i>
		keyVal+=key[i]*pow(10,j);
     4f6:	fe 01       	movw	r30, r28
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	e4 5d       	subi	r30, 0xD4	; 212
     4fe:	fd 4f       	sbci	r31, 0xFD	; 253
     500:	a0 80       	ld	r10, Z
     502:	b1 80       	ldd	r11, Z+1	; 0x01
     504:	00 91 22 02 	lds	r16, 0x0222	; 0x800222 <j>
     508:	10 91 23 02 	lds	r17, 0x0223	; 0x800223 <j+0x1>
     50c:	b8 01       	movw	r22, r16
     50e:	01 2e       	mov	r0, r17
     510:	00 0c       	add	r0, r0
     512:	88 0b       	sbc	r24, r24
     514:	99 0b       	sbc	r25, r25
     516:	0e 94 8b 08 	call	0x1116	; 0x1116 <__floatsisf>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	80 e2       	ldi	r24, 0x20	; 32
     524:	91 e4       	ldi	r25, 0x41	; 65
     526:	0e 94 84 09 	call	0x1308	; 0x1308 <pow>
     52a:	6b 01       	movw	r12, r22
     52c:	7c 01       	movw	r14, r24
     52e:	b5 01       	movw	r22, r10
     530:	bb 0c       	add	r11, r11
     532:	88 0b       	sbc	r24, r24
     534:	99 0b       	sbc	r25, r25
     536:	0e 94 8b 08 	call	0x1116	; 0x1116 <__floatsisf>
     53a:	a7 01       	movw	r20, r14
     53c:	96 01       	movw	r18, r12
     53e:	0e 94 17 09 	call	0x122e	; 0x122e <__mulsf3>
     542:	6b 01       	movw	r12, r22
     544:	7c 01       	movw	r14, r24
     546:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <keyVal>
     54a:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <keyVal+0x1>
     54e:	07 2e       	mov	r0, r23
     550:	00 0c       	add	r0, r0
     552:	88 0b       	sbc	r24, r24
     554:	99 0b       	sbc	r25, r25
     556:	0e 94 8b 08 	call	0x1116	; 0x1116 <__floatsisf>
     55a:	a7 01       	movw	r20, r14
     55c:	96 01       	movw	r18, r12
     55e:	0e 94 75 07 	call	0xeea	; 0xeea <__addsf3>
     562:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fixsfsi>
     566:	70 93 27 02 	sts	0x0227, r23	; 0x800227 <keyVal+0x1>
     56a:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <keyVal>
		if (i==0) return keyVal;
     56e:	cd 2b       	or	r28, r29
     570:	39 f0       	breq	.+14     	; 0x580 <keyValue+0x130>
		j++;
     572:	0f 5f       	subi	r16, 0xFF	; 255
     574:	1f 4f       	sbci	r17, 0xFF	; 255
     576:	10 93 23 02 	sts	0x0223, r17	; 0x800223 <j+0x1>
     57a:	00 93 22 02 	sts	0x0222, r16	; 0x800222 <j>
	}	
     57e:	b2 cf       	rjmp	.-156    	; 0x4e4 <keyValue+0x94>
}
     580:	cb 01       	movw	r24, r22
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	bf 90       	pop	r11
     594:	af 90       	pop	r10
     596:	08 95       	ret

00000598 <mixConfig>:
int intvl,duratn;
int mixTmrCount;

void mixConfig()
{
	LCD_Clear();
     598:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,">>Mixer Config");
     59c:	41 e6       	ldi	r20, 0x61	; 97
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
     5a8:	2f eb       	ldi	r18, 0xBF	; 191
     5aa:	87 e2       	ldi	r24, 0x27	; 39
     5ac:	99 e0       	ldi	r25, 0x09	; 9
     5ae:	21 50       	subi	r18, 0x01	; 1
     5b0:	80 40       	sbci	r24, 0x00	; 0
     5b2:	90 40       	sbci	r25, 0x00	; 0
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <mixConfig+0x16>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <mixConfig+0x20>
     5b8:	00 00       	nop
	_delay_ms(750);
	
	LCD_Clear();
     5ba:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,"Enter Interval");
     5be:	40 e7       	ldi	r20, 0x70	; 112
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	LCD_String_xy(1,0,"in hours:");
     5ca:	4f e7       	ldi	r20, 0x7F	; 127
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	intvl = keyValue();					//real calculation-> intvl = keyValue()*60*60 / program execution time
     5d6:	0e 94 28 02 	call	0x450	; 0x450 <keyValue>
     5da:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <intvl+0x1>
     5de:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <intvl>
     5e2:	2f e7       	ldi	r18, 0x7F	; 127
     5e4:	88 e3       	ldi	r24, 0x38	; 56
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	21 50       	subi	r18, 0x01	; 1
     5ea:	80 40       	sbci	r24, 0x00	; 0
     5ec:	90 40       	sbci	r25, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <mixConfig+0x50>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <mixConfig+0x5a>
     5f2:	00 00       	nop
	_delay_ms(100);
	
	LCD_Clear();
     5f4:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,"Enter Duration");
     5f8:	49 e8       	ldi	r20, 0x89	; 137
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	LCD_String_xy(1,0,"in minutes:");
     604:	48 e9       	ldi	r20, 0x98	; 152
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	duratn = keyValue();				//real calculation-> duratn = keyValue()*60 / program execution time
     610:	0e 94 28 02 	call	0x450	; 0x450 <keyValue>
     614:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <duratn+0x1>
     618:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <duratn>
	
	LCD_Clear();
     61c:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,"Setting Done");
     620:	44 ea       	ldi	r20, 0xA4	; 164
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
     62c:	2f e7       	ldi	r18, 0x7F	; 127
     62e:	8a e1       	ldi	r24, 0x1A	; 26
     630:	96 e0       	ldi	r25, 0x06	; 6
     632:	21 50       	subi	r18, 0x01	; 1
     634:	80 40       	sbci	r24, 0x00	; 0
     636:	90 40       	sbci	r25, 0x00	; 0
     638:	e1 f7       	brne	.-8      	; 0x632 <mixConfig+0x9a>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <mixConfig+0xa4>
     63c:	00 00       	nop
	_delay_ms(500);
	
	mixTmrCount=0;
     63e:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <mixTmrCount+0x1>
     642:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <mixTmrCount>
     646:	08 95       	ret

00000648 <mixToggle>:
}

void mixToggle(int x)
{
	if (x==1)
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	91 05       	cpc	r25, r1
     64c:	21 f4       	brne	.+8      	; 0x656 <mixToggle+0xe>
	{
		PORTB |= (1<<3);
     64e:	88 b3       	in	r24, 0x18	; 24
     650:	88 60       	ori	r24, 0x08	; 8
     652:	88 bb       	out	0x18, r24	; 24
     654:	08 95       	ret
	}
	
	else if (x==0)
     656:	89 2b       	or	r24, r25
     658:	19 f4       	brne	.+6      	; 0x660 <mixToggle+0x18>
	{
		PORTB &= ~(1<<3);
     65a:	88 b3       	in	r24, 0x18	; 24
     65c:	87 7f       	andi	r24, 0xF7	; 247
     65e:	88 bb       	out	0x18, r24	; 24
     660:	08 95       	ret

00000662 <mixToggleState>:

char mixState = 'i';

void mixToggleState(int x)
{
	if (mixState!='d')
     662:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     666:	24 36       	cpi	r18, 0x64	; 100
     668:	11 f0       	breq	.+4      	; 0x66e <mixToggleState+0xc>
	{
		mixToggle(x);
     66a:	0e 94 24 03 	call	0x648	; 0x648 <mixToggle>
     66e:	08 95       	ret

00000670 <mixAndTmrCheck>:
}


void mixAndTmrCheck()
{
	if (mixTmrCount*8>intvl && mixState=='i')		//interval met
     670:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <mixTmrCount>
     674:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <mixTmrCount+0x1>
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <intvl>
     688:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <intvl+0x1>
     68c:	28 17       	cp	r18, r24
     68e:	39 07       	cpc	r19, r25
     690:	84 f4       	brge	.+32     	; 0x6b2 <mixAndTmrCheck+0x42>
     692:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     696:	29 36       	cpi	r18, 0x69	; 105
     698:	61 f4       	brne	.+24     	; 0x6b2 <mixAndTmrCheck+0x42>
	{
		mixToggle(1);
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 24 03 	call	0x648	; 0x648 <mixToggle>
		mixTmrCount=0;
     6a2:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <mixTmrCount+0x1>
     6a6:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <mixTmrCount>
		mixState='d';
     6aa:	84 e6       	ldi	r24, 0x64	; 100
     6ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     6b0:	16 c0       	rjmp	.+44     	; 0x6de <mixAndTmrCheck+0x6e>
	}

	else if (mixTmrCount*8>duratn && mixState=='d')		//duration met
     6b2:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <duratn>
     6b6:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <duratn+0x1>
     6ba:	28 17       	cp	r18, r24
     6bc:	39 07       	cpc	r19, r25
     6be:	7c f4       	brge	.+30     	; 0x6de <mixAndTmrCheck+0x6e>
     6c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6c4:	84 36       	cpi	r24, 0x64	; 100
     6c6:	59 f4       	brne	.+22     	; 0x6de <mixAndTmrCheck+0x6e>
	{
		mixToggle(0);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 24 03 	call	0x648	; 0x648 <mixToggle>
		mixTmrCount=0;
     6d0:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <mixTmrCount+0x1>
     6d4:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <mixTmrCount>
		mixState='i';
     6d8:	89 e6       	ldi	r24, 0x69	; 105
     6da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	mixTmrCount++;		//1 count = program execution time
     6de:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <mixTmrCount>
     6e2:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <mixTmrCount+0x1>
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <mixTmrCount+0x1>
     6ec:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <mixTmrCount>
     6f0:	08 95       	ret

000006f2 <shrdr>:


/////////shredder and LED indicator
void shrdr(int x)
{
	if(x==1)
     6f2:	81 30       	cpi	r24, 0x01	; 1
     6f4:	91 05       	cpc	r25, r1
     6f6:	39 f4       	brne	.+14     	; 0x706 <shrdr+0x14>
	{
		PORTB&= ~(1<<2);
     6f8:	88 b3       	in	r24, 0x18	; 24
     6fa:	8b 7f       	andi	r24, 0xFB	; 251
     6fc:	88 bb       	out	0x18, r24	; 24
		PORTB|= (1<<1);
     6fe:	88 b3       	in	r24, 0x18	; 24
     700:	82 60       	ori	r24, 0x02	; 2
     702:	88 bb       	out	0x18, r24	; 24
     704:	08 95       	ret
	}
	else if(x==0)
     706:	89 2b       	or	r24, r25
     708:	31 f4       	brne	.+12     	; 0x716 <shrdr+0x24>
	{
		PORTB|= (1<<2);
     70a:	88 b3       	in	r24, 0x18	; 24
     70c:	84 60       	ori	r24, 0x04	; 4
     70e:	88 bb       	out	0x18, r24	; 24
	    PORTB&= ~(1<<1);
     710:	88 b3       	in	r24, 0x18	; 24
     712:	8d 7f       	andi	r24, 0xFD	; 253
     714:	88 bb       	out	0x18, r24	; 24
     716:	08 95       	ret

00000718 <ADC_Init>:



////////////ADC
void ADC_Init(){
	DDRA &= ~(7<<0);	        /* Make ADC port as input */
     718:	8a b3       	in	r24, 0x1a	; 26
     71a:	88 7f       	andi	r24, 0xF8	; 248
     71c:	8a bb       	out	0x1a, r24	; 26
	ADCSRA = 0x85;          /* Enable ADC, with freq/128  */
     71e:	85 e8       	ldi	r24, 0x85	; 133
     720:	86 b9       	out	0x06, r24	; 6
     722:	08 95       	ret

00000724 <ADC_Read>:
}

int ADC_Read(char channel)
{
	ADMUX = 0x40 | (channel & 0x07);   /* set input channel to read */
     724:	87 70       	andi	r24, 0x07	; 7
     726:	80 64       	ori	r24, 0x40	; 64
     728:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);               /* Start ADC conversion */
     72a:	86 b1       	in	r24, 0x06	; 6
     72c:	80 64       	ori	r24, 0x40	; 64
     72e:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
     730:	34 9b       	sbis	0x06, 4	; 6
     732:	fe cf       	rjmp	.-4      	; 0x730 <ADC_Read+0xc>
	ADCSRA |= (1<<ADIF);               /* Clear interrupt flag */
     734:	86 b1       	in	r24, 0x06	; 6
     736:	80 61       	ori	r24, 0x10	; 16
     738:	86 b9       	out	0x06, r24	; 6
     73a:	87 ee       	ldi	r24, 0xE7	; 231
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <ADC_Read+0x1a>
     742:	00 c0       	rjmp	.+0      	; 0x744 <ADC_Read+0x20>
     744:	00 00       	nop
	_delay_ms(1);                      /* Wait a little bit */
	return ADCW;                       /* Return ADC word */
     746:	84 b1       	in	r24, 0x04	; 4
     748:	95 b1       	in	r25, 0x05	; 5
}
     74a:	08 95       	ret

0000074c <Temp>:



///////////Temperature
void Temp()
{
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	00 d0       	rcall	.+0      	; 0x75a <Temp+0xe>
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
	int temp;
	char tempStr[2];
	
	LCD_Clear();
     75e:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,"Checking Temp..");
     762:	41 eb       	ldi	r20, 0xB1	; 177
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
     76e:	2f ef       	ldi	r18, 0xFF	; 255
     770:	84 e3       	ldi	r24, 0x34	; 52
     772:	9c e0       	ldi	r25, 0x0C	; 12
     774:	21 50       	subi	r18, 0x01	; 1
     776:	80 40       	sbci	r24, 0x00	; 0
     778:	90 40       	sbci	r25, 0x00	; 0
     77a:	e1 f7       	brne	.-8      	; 0x774 <Temp+0x28>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <Temp+0x32>
     77e:	00 00       	nop
	_delay_ms(1000);
	temp=(ADC_Read(0)*4.88/10);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 92 03 	call	0x724	; 0x724 <ADC_Read>
     786:	bc 01       	movw	r22, r24
     788:	99 0f       	add	r25, r25
     78a:	88 0b       	sbc	r24, r24
     78c:	99 0b       	sbc	r25, r25
     78e:	0e 94 8b 08 	call	0x1116	; 0x1116 <__floatsisf>
     792:	26 ef       	ldi	r18, 0xF6	; 246
     794:	38 e2       	ldi	r19, 0x28	; 40
     796:	4c e9       	ldi	r20, 0x9C	; 156
     798:	50 e4       	ldi	r21, 0x40	; 64
     79a:	0e 94 17 09 	call	0x122e	; 0x122e <__mulsf3>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e2       	ldi	r20, 0x20	; 32
     7a4:	51 e4       	ldi	r21, 0x41	; 65
     7a6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__divsf3>
     7aa:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fixsfsi>
     7ae:	f6 2e       	mov	r15, r22
     7b0:	e7 2e       	mov	r14, r23
     7b2:	86 2f       	mov	r24, r22
     7b4:	9e 2d       	mov	r25, r14
     7b6:	8c 01       	movw	r16, r24
	LCD_Clear();
     7b8:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	
	if (temp<=25)
     7bc:	0a 31       	cpi	r16, 0x1A	; 26
     7be:	11 05       	cpc	r17, r1
     7c0:	a4 f4       	brge	.+40     	; 0x7ea <Temp+0x9e>
	{
		LCD_String_xy(0,0,"Temperature LOW");
     7c2:	41 ec       	ldi	r20, 0xC1	; 193
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		LCD_String_xy(1,0,"Heating...");
     7ce:	41 ed       	ldi	r20, 0xD1	; 209
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		mixToggleState(1);
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 31 03 	call	0x662	; 0x662 <mixToggleState>
		PORTB|=(3<<6);		//Fan and heat coil on
     7e2:	88 b3       	in	r24, 0x18	; 24
     7e4:	80 6c       	ori	r24, 0xC0	; 192
     7e6:	88 bb       	out	0x18, r24	; 24
     7e8:	3f c0       	rjmp	.+126    	; 0x868 <__stack+0x9>
	}
	else if(temp>=35)
     7ea:	03 32       	cpi	r16, 0x23	; 35
     7ec:	11 05       	cpc	r17, r1
     7ee:	bc f0       	brlt	.+46     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
	{
		LCD_String_xy(0,0,"Temperature HIGH");
     7f0:	4c ed       	ldi	r20, 0xDC	; 220
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		LCD_String_xy(1,0,"Cooling...");
     7fc:	4d ee       	ldi	r20, 0xED	; 237
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		mixToggleState(1);
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 31 03 	call	0x662	; 0x662 <mixToggleState>
		PORTB&=~(1<<6);		//heat off
     810:	88 b3       	in	r24, 0x18	; 24
     812:	8f 7b       	andi	r24, 0xBF	; 191
     814:	88 bb       	out	0x18, r24	; 24
		PORTB|=(1<<7);		//Fan on
     816:	88 b3       	in	r24, 0x18	; 24
     818:	80 68       	ori	r24, 0x80	; 128
     81a:	88 bb       	out	0x18, r24	; 24
     81c:	25 c0       	rjmp	.+74     	; 0x868 <__stack+0x9>
	}
	else
	{
		LCD_String_xy(0,0,"Temperature OK");
     81e:	48 ef       	ldi	r20, 0xF8	; 248
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		sprintf(tempStr,"%d C",temp);
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	87 e0       	ldi	r24, 0x07	; 7
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	9f 93       	push	r25
     834:	8f 93       	push	r24
     836:	8e 01       	movw	r16, r28
     838:	0f 5f       	subi	r16, 0xFF	; 255
     83a:	1f 4f       	sbci	r17, 0xFF	; 255
     83c:	1f 93       	push	r17
     83e:	0f 93       	push	r16
     840:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <sprintf>
		LCD_String_xy(1,0,tempStr);
     844:	a8 01       	movw	r20, r16
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		mixToggleState(0);
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 31 03 	call	0x662	; 0x662 <mixToggleState>
		PORTB&=~(3<<6);		//fan and heat off
     856:	88 b3       	in	r24, 0x18	; 24
     858:	8f 73       	andi	r24, 0x3F	; 63
     85a:	88 bb       	out	0x18, r24	; 24
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	2f ef       	ldi	r18, 0xFF	; 255
     86a:	89 e6       	ldi	r24, 0x69	; 105
     86c:	98 e1       	ldi	r25, 0x18	; 24
     86e:	21 50       	subi	r18, 0x01	; 1
     870:	80 40       	sbci	r24, 0x00	; 0
     872:	90 40       	sbci	r25, 0x00	; 0
     874:	e1 f7       	brne	.-8      	; 0x86e <__stack+0xf>
     876:	00 c0       	rjmp	.+0      	; 0x878 <__stack+0x19>
     878:	00 00       	nop
	}
	_delay_ms(2000);
}
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	08 95       	ret

0000088c <valve>:


//Solenoid Valve and indicator
void valve(int x)
{
	if (x==1)
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	91 05       	cpc	r25, r1
     890:	39 f4       	brne	.+14     	; 0x8a0 <valve+0x14>
	{
		PORTB |= (1<<4);
     892:	88 b3       	in	r24, 0x18	; 24
     894:	80 61       	ori	r24, 0x10	; 16
     896:	88 bb       	out	0x18, r24	; 24
		PORTA |= (1<<5);
     898:	8b b3       	in	r24, 0x1b	; 27
     89a:	80 62       	ori	r24, 0x20	; 32
     89c:	8b bb       	out	0x1b, r24	; 27
     89e:	08 95       	ret
	}
	
	else if (x==0)
     8a0:	89 2b       	or	r24, r25
     8a2:	31 f4       	brne	.+12     	; 0x8b0 <valve+0x24>
	{
		PORTB&= ~(1<<4);	
     8a4:	88 b3       	in	r24, 0x18	; 24
     8a6:	8f 7e       	andi	r24, 0xEF	; 239
     8a8:	88 bb       	out	0x18, r24	; 24
		PORTA&= ~(1<<5);	
     8aa:	8b b3       	in	r24, 0x1b	; 27
     8ac:	8f 7d       	andi	r24, 0xDF	; 223
     8ae:	8b bb       	out	0x1b, r24	; 27
     8b0:	08 95       	ret

000008b2 <Soil>:
	}
}

//////////Soil Moisture
void Soil()
{
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <Soil+0xe>
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
	int soil;
	char soilStr[2];
	
	LCD_Clear();
     8c4:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,"Checking");
     8c8:	4c e0       	ldi	r20, 0x0C	; 12
     8ca:	51 e0       	ldi	r21, 0x01	; 1
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	LCD_String_xy(1,0,"Soil Moisture...");
     8d4:	45 e1       	ldi	r20, 0x15	; 21
     8d6:	51 e0       	ldi	r21, 0x01	; 1
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
     8e0:	2f ef       	ldi	r18, 0xFF	; 255
     8e2:	84 e3       	ldi	r24, 0x34	; 52
     8e4:	9c e0       	ldi	r25, 0x0C	; 12
     8e6:	21 50       	subi	r18, 0x01	; 1
     8e8:	80 40       	sbci	r24, 0x00	; 0
     8ea:	90 40       	sbci	r25, 0x00	; 0
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <Soil+0x34>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <Soil+0x3e>
     8f0:	00 00       	nop
	_delay_ms(1000);
	soil=(ADC_Read(1)*100.00/1023.00);
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	0e 94 92 03 	call	0x724	; 0x724 <ADC_Read>
     8f8:	bc 01       	movw	r22, r24
     8fa:	99 0f       	add	r25, r25
     8fc:	88 0b       	sbc	r24, r24
     8fe:	99 0b       	sbc	r25, r25
     900:	0e 94 8b 08 	call	0x1116	; 0x1116 <__floatsisf>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	48 ec       	ldi	r20, 0xC8	; 200
     90a:	52 e4       	ldi	r21, 0x42	; 66
     90c:	0e 94 17 09 	call	0x122e	; 0x122e <__mulsf3>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 ec       	ldi	r19, 0xC0	; 192
     914:	4f e7       	ldi	r20, 0x7F	; 127
     916:	54 e4       	ldi	r21, 0x44	; 68
     918:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__divsf3>
     91c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fixsfsi>
     920:	f6 2e       	mov	r15, r22
     922:	e7 2e       	mov	r14, r23
     924:	86 2f       	mov	r24, r22
     926:	9e 2d       	mov	r25, r14
     928:	8c 01       	movw	r16, r24
	LCD_Clear();
     92a:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	
	if (soil<=40)
     92e:	09 32       	cpi	r16, 0x29	; 41
     930:	11 05       	cpc	r17, r1
     932:	34 f5       	brge	.+76     	; 0x980 <Soil+0xce>
	{
		LCD_String_xy(0,0,"Moisture LOW");
     934:	46 e2       	ldi	r20, 0x26	; 38
     936:	51 e0       	ldi	r21, 0x01	; 1
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		LCD_String_xy(1,0,"Watering...");
     940:	43 e3       	ldi	r20, 0x33	; 51
     942:	51 e0       	ldi	r21, 0x01	; 1
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		
		valve(1);		//solenoid valve open
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 46 04 	call	0x88c	; 0x88c <valve>
		mixToggleState(1);
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 31 03 	call	0x662	; 0x662 <mixToggleState>
     95c:	2f ef       	ldi	r18, 0xFF	; 255
     95e:	88 e0       	ldi	r24, 0x08	; 8
     960:	9d e3       	ldi	r25, 0x3D	; 61
     962:	21 50       	subi	r18, 0x01	; 1
     964:	80 40       	sbci	r24, 0x00	; 0
     966:	90 40       	sbci	r25, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <Soil+0xb0>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <Soil+0xba>
     96c:	00 00       	nop
		_delay_ms(5000);
		valve(0);	//solenoid valve close
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 46 04 	call	0x88c	; 0x88c <valve>
		mixToggleState(0);
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 31 03 	call	0x662	; 0x662 <mixToggleState>
     97e:	27 c0       	rjmp	.+78     	; 0x9ce <Soil+0x11c>
	}
	else
	{
		LCD_String_xy(0,0,"Moisture OK");
     980:	4f e3       	ldi	r20, 0x3F	; 63
     982:	51 e0       	ldi	r21, 0x01	; 1
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		sprintf(soilStr,"%d %%",soil);
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	8b e4       	ldi	r24, 0x4B	; 75
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	9f 93       	push	r25
     996:	8f 93       	push	r24
     998:	8e 01       	movw	r16, r28
     99a:	0f 5f       	subi	r16, 0xFF	; 255
     99c:	1f 4f       	sbci	r17, 0xFF	; 255
     99e:	1f 93       	push	r17
     9a0:	0f 93       	push	r16
     9a2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <sprintf>
		LCD_String_xy(1,0,soilStr);
     9a6:	a8 01       	movw	r20, r16
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	89 e6       	ldi	r24, 0x69	; 105
     9b4:	98 e1       	ldi	r25, 0x18	; 24
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	80 40       	sbci	r24, 0x00	; 0
     9ba:	90 40       	sbci	r25, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <Soil+0x104>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <Soil+0x10e>
     9c0:	00 00       	nop
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
		_delay_ms(2000);
	}	
}
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	08 95       	ret

000009e0 <pH>:


///////////pH
void pH()
{
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <pH+0xa>
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <pH+0xc>
     9ec:	1f 92       	push	r1
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
	float ph;
	char phStr[5];
	
	LCD_Clear();
     9f2:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,"Checking pH...");
     9f6:	41 e5       	ldi	r20, 0x51	; 81
     9f8:	51 e0       	ldi	r21, 0x01	; 1
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
     a02:	2f ef       	ldi	r18, 0xFF	; 255
     a04:	84 e3       	ldi	r24, 0x34	; 52
     a06:	9c e0       	ldi	r25, 0x0C	; 12
     a08:	21 50       	subi	r18, 0x01	; 1
     a0a:	80 40       	sbci	r24, 0x00	; 0
     a0c:	90 40       	sbci	r25, 0x00	; 0
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <pH+0x28>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <pH+0x32>
     a12:	00 00       	nop
	_delay_ms(1000);
	ph=((ADC_Read(2)*5.00*2.80)/1023.00);
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	0e 94 92 03 	call	0x724	; 0x724 <ADC_Read>
     a1a:	bc 01       	movw	r22, r24
     a1c:	99 0f       	add	r25, r25
     a1e:	88 0b       	sbc	r24, r24
     a20:	99 0b       	sbc	r25, r25
     a22:	0e 94 8b 08 	call	0x1116	; 0x1116 <__floatsisf>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 ea       	ldi	r20, 0xA0	; 160
     a2c:	50 e4       	ldi	r21, 0x40	; 64
     a2e:	0e 94 17 09 	call	0x122e	; 0x122e <__mulsf3>
     a32:	23 e3       	ldi	r18, 0x33	; 51
     a34:	33 e3       	ldi	r19, 0x33	; 51
     a36:	43 e3       	ldi	r20, 0x33	; 51
     a38:	50 e4       	ldi	r21, 0x40	; 64
     a3a:	0e 94 17 09 	call	0x122e	; 0x122e <__mulsf3>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 ec       	ldi	r19, 0xC0	; 192
     a42:	4f e7       	ldi	r20, 0x7F	; 127
     a44:	54 e4       	ldi	r21, 0x44	; 68
     a46:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__divsf3>
	
	dtostrf(ph,3,1,phStr);
     a4a:	8e 01       	movw	r16, r28
     a4c:	0f 5f       	subi	r16, 0xFF	; 255
     a4e:	1f 4f       	sbci	r17, 0xFF	; 255
     a50:	21 e0       	ldi	r18, 0x01	; 1
     a52:	43 e0       	ldi	r20, 0x03	; 3
     a54:	0e 94 31 0b 	call	0x1662	; 0x1662 <dtostrf>
	LCD_Clear();
     a58:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,"pH:");
     a5c:	40 e6       	ldi	r20, 0x60	; 96
     a5e:	51 e0       	ldi	r21, 0x01	; 1
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	LCD_String_xy(1,0,phStr);
     a68:	a8 01       	movw	r20, r16
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
     a72:	2f ef       	ldi	r18, 0xFF	; 255
     a74:	89 e6       	ldi	r24, 0x69	; 105
     a76:	98 e1       	ldi	r25, 0x18	; 24
     a78:	21 50       	subi	r18, 0x01	; 1
     a7a:	80 40       	sbci	r24, 0x00	; 0
     a7c:	90 40       	sbci	r25, 0x00	; 0
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <pH+0x98>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <pH+0xa2>
     a82:	00 00       	nop
	_delay_ms(2000);
}
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <US_Init>:
#define	US_NO_OBSTACLE	-2


void US_Init()
{
	US_DDR|=(1<<US_TRIG_POS);		// we're setting the trigger pin as output as it will generate ultrasonic sound wave
     a98:	8a b3       	in	r24, 0x1a	; 26
     a9a:	80 68       	ori	r24, 0x80	; 128
     a9c:	8a bb       	out	0x1a, r24	; 26
     a9e:	08 95       	ret

00000aa0 <US_Trigger>:

void US_Trigger()
{   // this function will generate ultrasonic sound wave for 15 microseconds
	//Send a 10uS pulse on trigger line
	
	US_PORT|=(1<<US_TRIG_POS);	//high
     aa0:	8b b3       	in	r24, 0x1b	; 27
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa6:	84 e1       	ldi	r24, 0x14	; 20
     aa8:	8a 95       	dec	r24
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <US_Trigger+0x8>
	_delay_us(15);				//wait 15uS
	US_PORT&=~(1<<US_TRIG_POS);	//low
     aac:	8b b3       	in	r24, 0x1b	; 27
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	8b bb       	out	0x1b, r24	; 27
     ab2:	08 95       	ret

00000ab4 <GetPulseWidth>:
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	dc 01       	movw	r26, r24
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <GetPulseWidth+0x12>
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
     abc:	ce 99       	sbic	0x19, 6	; 25
     abe:	0a c0       	rjmp	.+20     	; 0xad4 <GetPulseWidth+0x20>
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	a1 1d       	adc	r26, r1
     ac4:	b1 1d       	adc	r27, r1
     ac6:	80 3c       	cpi	r24, 0xC0	; 192
     ac8:	27 e2       	ldi	r18, 0x27	; 39
     aca:	92 07       	cpc	r25, r18
     acc:	29 e0       	ldi	r18, 0x09	; 9
     ace:	a2 07       	cpc	r26, r18
     ad0:	b1 05       	cpc	r27, r1
     ad2:	a0 f3       	brcs	.-24     	; 0xabc <GetPulseWidth+0x8>
		continue;	//Line is still low, so wait
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
     ad4:	80 3c       	cpi	r24, 0xC0	; 192
     ad6:	97 42       	sbci	r25, 0x27	; 39
     ad8:	a9 40       	sbci	r26, 0x09	; 9
     ada:	b1 05       	cpc	r27, r1
     adc:	79 f1       	breq	.+94     	; 0xb3c <GetPulseWidth+0x88>
	
	//High Edge Found
	
	// Section -2 : This section is all about preparing the timer for counting the time of the pulse. Timers in microcontrllers is used for timimg operation
	//Setup Timer1
	TCCR1A=0X00;
     ade:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;			// This line start the counter to start counting time
     ae4:	1d bc       	out	0x2d, r1	; 45
     ae6:	1c bc       	out	0x2c, r1	; 44

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	dc 01       	movw	r26, r24
     aee:	0a c0       	rjmp	.+20     	; 0xb04 <GetPulseWidth+0x50>
	{
		if(US_PIN & (1<<US_ECHO_POS))
     af0:	ce 9b       	sbis	0x19, 6	; 25
     af2:	0f c0       	rjmp	.+30     	; 0xb12 <GetPulseWidth+0x5e>
		{
			if(TCNT1 > 60000) break; else continue;   // if the TCNT1 value gets higher than 60000 it means there is not object in the range of the sensor
     af4:	2c b5       	in	r18, 0x2c	; 44
     af6:	3d b5       	in	r19, 0x2d	; 45
     af8:	21 36       	cpi	r18, 0x61	; 97
     afa:	3a 4e       	sbci	r19, 0xEA	; 234
     afc:	50 f4       	brcc	.+20     	; 0xb12 <GetPulseWidth+0x5e>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
	TCNT1=0x00;			// This line start the counter to start counting time

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	a1 1d       	adc	r26, r1
     b02:	b1 1d       	adc	r27, r1
     b04:	80 3c       	cpi	r24, 0xC0	; 192
     b06:	27 e2       	ldi	r18, 0x27	; 39
     b08:	92 07       	cpc	r25, r18
     b0a:	29 e0       	ldi	r18, 0x09	; 9
     b0c:	a2 07       	cpc	r26, r18
     b0e:	b1 05       	cpc	r27, r1
     b10:	78 f3       	brcs	.-34     	; 0xaf0 <GetPulseWidth+0x3c>
		}
		else
		break;
	}

	if(i==600000)
     b12:	80 3c       	cpi	r24, 0xC0	; 192
     b14:	97 42       	sbci	r25, 0x27	; 39
     b16:	a9 40       	sbci	r26, 0x09	; 9
     b18:	b1 05       	cpc	r27, r1
     b1a:	99 f0       	breq	.+38     	; 0xb42 <GetPulseWidth+0x8e>
	return US_NO_OBSTACLE;	//Indicates time out

	//Falling edge found

	result=TCNT1;          // microcontroller stores the the value of the counted pulse time in the TCNT1 register.
     b1c:	8c b5       	in	r24, 0x2c	; 44
     b1e:	9d b5       	in	r25, 0x2d	; 45
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
	TCCR1B=0x00;		//Stop Timer
     b24:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
     b26:	81 36       	cpi	r24, 0x61	; 97
     b28:	2a ee       	ldi	r18, 0xEA	; 234
     b2a:	92 07       	cpc	r25, r18
     b2c:	a1 05       	cpc	r26, r1
     b2e:	b1 05       	cpc	r27, r1
     b30:	58 f4       	brcc	.+22     	; 0xb48 <GetPulseWidth+0x94>
	return US_NO_OBSTACLE;	//No obstacle
	else
	return (result>>1);
     b32:	b6 95       	lsr	r27
     b34:	a7 95       	ror	r26
     b36:	97 95       	ror	r25
     b38:	87 95       	ror	r24
     b3a:	08 95       	ret
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
	return US_ERROR;	//Indicates time out
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	9f ef       	ldi	r25, 0xFF	; 255
     b40:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	//Indicates time out
     b42:	8e ef       	ldi	r24, 0xFE	; 254
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	08 95       	ret

	result=TCNT1;          // microcontroller stores the the value of the counted pulse time in the TCNT1 register.
	TCCR1B=0x00;		//Stop Timer

	if(result > 60000)
	return US_NO_OBSTACLE;	//No obstacle
     b48:	8e ef       	ldi	r24, 0xFE	; 254
     b4a:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
     b4c:	08 95       	ret

00000b4e <buzz>:


/////////////buzzer and LED indicator
void buzz(int x)
{
	if(x==1)
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	91 05       	cpc	r25, r1
     b52:	21 f4       	brne	.+8      	; 0xb5c <buzz+0xe>
	{
		PORTB|=((1<<5) | (1<<0));
     b54:	88 b3       	in	r24, 0x18	; 24
     b56:	81 62       	ori	r24, 0x21	; 33
     b58:	88 bb       	out	0x18, r24	; 24
     b5a:	08 95       	ret
	}
	else if(x==0)
     b5c:	89 2b       	or	r24, r25
     b5e:	19 f4       	brne	.+6      	; 0xb66 <buzz+0x18>
	{
		PORTB&=~((1<<5) | (1<<0)) ;
     b60:	88 b3       	in	r24, 0x18	; 24
     b62:	8e 7d       	andi	r24, 0xDE	; 222
     b64:	88 bb       	out	0x18, r24	; 24
     b66:	08 95       	ret

00000b68 <waterLevel>:
int wtrLvl=0;
char wtrLvlStr[3];

void waterLevel()
{	
	LCD_Clear();
     b68:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,"Checking");
     b6c:	4c e0       	ldi	r20, 0x0C	; 12
     b6e:	51 e0       	ldi	r21, 0x01	; 1
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	LCD_String_xy(1,1,"Water Level...");
     b78:	44 e6       	ldi	r20, 0x64	; 100
     b7a:	51 e0       	ldi	r21, 0x01	; 1
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b84:	2f ef       	ldi	r18, 0xFF	; 255
     b86:	84 e3       	ldi	r24, 0x34	; 52
     b88:	9c e0       	ldi	r25, 0x0C	; 12
     b8a:	21 50       	subi	r18, 0x01	; 1
     b8c:	80 40       	sbci	r24, 0x00	; 0
     b8e:	90 40       	sbci	r25, 0x00	; 0
     b90:	e1 f7       	brne	.-8      	; 0xb8a <waterLevel+0x22>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <waterLevel+0x2c>
     b94:	00 00       	nop
	_delay_ms(1000);
	
	while(1)
	{
		US_Trigger();               // calling the ultrasonic sound wave generator function
     b96:	0e 94 50 05 	call	0xaa0	; 0xaa0 <US_Trigger>
		USduration=GetPulseWidth();             // getting the duration of the ultrasound took to echo back
     b9a:	0e 94 5a 05 	call	0xab4	; 0xab4 <GetPulseWidth>
     b9e:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <USduration+0x1>
     ba2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <USduration>
		
		if(USduration==US_ERROR)       // if microcontroller doesn't get any pulse then it will set the US_ERROR variable to -1
     ba6:	8f 3f       	cpi	r24, 0xFF	; 255
     ba8:	2f ef       	ldi	r18, 0xFF	; 255
     baa:	92 07       	cpc	r25, r18
     bac:	f1 f4       	brne	.+60     	; 0xbea <waterLevel+0x82>
		{
			LCD_Clear();
     bae:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
			LCD_String_xy(0,0,"Error: Check");
     bb2:	43 e7       	ldi	r20, 0x73	; 115
     bb4:	51 e0       	ldi	r21, 0x01	; 1
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
			LCD_String_xy(1,0,"Water Lvl Sensor");
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	51 e0       	ldi	r21, 0x01	; 1
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
			wtrLvl=US_ERROR;
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	9f ef       	ldi	r25, 0xFF	; 255
     bce:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <__data_end+0x1>
     bd2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	99 e6       	ldi	r25, 0x69	; 105
     bda:	28 e1       	ldi	r18, 0x18	; 24
     bdc:	81 50       	subi	r24, 0x01	; 1
     bde:	90 40       	sbci	r25, 0x00	; 0
     be0:	20 40       	sbci	r18, 0x00	; 0
     be2:	e1 f7       	brne	.-8      	; 0xbdc <waterLevel+0x74>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <waterLevel+0x7e>
     be6:	00 00       	nop
     be8:	d6 cf       	rjmp	.-84     	; 0xb96 <waterLevel+0x2e>
			_delay_ms(2000);
		}
		else
		{
			wtrLvl=100-(USduration*0.034*4/2.0);	// This will give the distance in centimeters
     bea:	bc 01       	movw	r22, r24
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 89 08 	call	0x1112	; 0x1112 <__floatunsisf>
     bf4:	26 e9       	ldi	r18, 0x96	; 150
     bf6:	33 e4       	ldi	r19, 0x43	; 67
     bf8:	4b e0       	ldi	r20, 0x0B	; 11
     bfa:	5d e3       	ldi	r21, 0x3D	; 61
     bfc:	0e 94 17 09 	call	0x122e	; 0x122e <__mulsf3>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e8       	ldi	r20, 0x80	; 128
     c06:	50 e4       	ldi	r21, 0x40	; 64
     c08:	0e 94 17 09 	call	0x122e	; 0x122e <__mulsf3>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	5f e3       	ldi	r21, 0x3F	; 63
     c14:	0e 94 17 09 	call	0x122e	; 0x122e <__mulsf3>
     c18:	9b 01       	movw	r18, r22
     c1a:	ac 01       	movw	r20, r24
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	88 ec       	ldi	r24, 0xC8	; 200
     c22:	92 e4       	ldi	r25, 0x42	; 66
     c24:	0e 94 74 07 	call	0xee8	; 0xee8 <__subsf3>
     c28:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fixsfsi>
     c2c:	9b 01       	movw	r18, r22
     c2e:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <__data_end+0x1>
     c32:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <__data_end>
			break;
		}
	}
	
	
	if (0<wtrLvl && wtrLvl<=15)
     c36:	61 50       	subi	r22, 0x01	; 1
     c38:	71 09       	sbc	r23, r1
     c3a:	6f 30       	cpi	r22, 0x0F	; 15
     c3c:	71 05       	cpc	r23, r1
     c3e:	b0 f4       	brcc	.+44     	; 0xc6c <waterLevel+0x104>
	{
		LCD_Clear();
     c40:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
		LCD_String_xy(0,0,"Water Level LOW");
     c44:	41 e9       	ldi	r20, 0x91	; 145
     c46:	51 e0       	ldi	r21, 0x01	; 1
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		buzz(1);							//buzz and LED on
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 a7 05 	call	0xb4e	; 0xb4e <buzz>
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	99 e6       	ldi	r25, 0x69	; 105
     c5c:	28 e1       	ldi	r18, 0x18	; 24
     c5e:	81 50       	subi	r24, 0x01	; 1
     c60:	90 40       	sbci	r25, 0x00	; 0
     c62:	20 40       	sbci	r18, 0x00	; 0
     c64:	e1 f7       	brne	.-8      	; 0xc5e <waterLevel+0xf6>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <waterLevel+0x100>
     c68:	00 00       	nop
     c6a:	08 95       	ret
		_delay_ms(2000);
	}
	else if (wtrLvl>15)
     c6c:	20 31       	cpi	r18, 0x10	; 16
     c6e:	31 05       	cpc	r19, r1
     c70:	8c f1       	brlt	.+98     	; 0xcd4 <waterLevel+0x16c>
	{
		LCD_Clear();
     c72:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
		LCD_String_xy(0,0,"Water Level:");
     c76:	41 ea       	ldi	r20, 0xA1	; 161
     c78:	51 e0       	ldi	r21, 0x01	; 1
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		sprintf(wtrLvlStr,"%d cm",wtrLvl);
     c82:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     c86:	8f 93       	push	r24
     c88:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     c8c:	8f 93       	push	r24
     c8e:	8e ea       	ldi	r24, 0xAE	; 174
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	82 e3       	ldi	r24, 0x32	; 50
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	9f 93       	push	r25
     c9c:	8f 93       	push	r24
     c9e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <sprintf>
		LCD_String_xy(1,0,wtrLvlStr);
     ca2:	42 e3       	ldi	r20, 0x32	; 50
     ca4:	52 e0       	ldi	r21, 0x02	; 2
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
		buzz(0);							//buzz and LED off
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <buzz>
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	94 e3       	ldi	r25, 0x34	; 52
     cba:	2c e0       	ldi	r18, 0x0C	; 12
     cbc:	81 50       	subi	r24, 0x01	; 1
     cbe:	90 40       	sbci	r25, 0x00	; 0
     cc0:	20 40       	sbci	r18, 0x00	; 0
     cc2:	e1 f7       	brne	.-8      	; 0xcbc <waterLevel+0x154>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <waterLevel+0x15e>
     cc6:	00 00       	nop
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	08 95       	ret

00000cd6 <menu>:


////////////menu
void menu()
{
	LCD_Clear();
     cd6:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,1,"==== MENU ====");
     cda:	44 eb       	ldi	r20, 0xB4	; 180
     cdc:	51 e0       	ldi	r21, 0x01	; 1
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	LCD_String_xy(1,0,"select option");
     ce6:	43 ec       	ldi	r20, 0xC3	; 195
     ce8:	51 e0       	ldi	r21, 0x01	; 1
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
     cf2:	2f ef       	ldi	r18, 0xFF	; 255
     cf4:	84 e3       	ldi	r24, 0x34	; 52
     cf6:	9c e0       	ldi	r25, 0x0C	; 12
     cf8:	21 50       	subi	r18, 0x01	; 1
     cfa:	80 40       	sbci	r24, 0x00	; 0
     cfc:	90 40       	sbci	r25, 0x00	; 0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <menu+0x22>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <menu+0x2c>
     d02:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
     d04:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,"1-> Mixer Config");
     d08:	41 ed       	ldi	r20, 0xD1	; 209
     d0a:	51 e0       	ldi	r21, 0x01	; 1
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	LCD_String_xy(1,0,"2-> Check pH");
     d14:	42 ee       	ldi	r20, 0xE2	; 226
     d16:	51 e0       	ldi	r21, 0x01	; 1
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	
	switch (keycheck())
     d20:	0e 94 c7 01 	call	0x38e	; 0x38e <keycheck>
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	91 05       	cpc	r25, r1
     d28:	19 f0       	breq	.+6      	; 0xd30 <menu+0x5a>
     d2a:	02 97       	sbiw	r24, 0x02	; 2
     d2c:	21 f0       	breq	.+8      	; 0xd36 <menu+0x60>
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <menu+0x64>
	{
		case 1:
			mixConfig();
     d30:	0e 94 cc 02 	call	0x598	; 0x598 <mixConfig>
			break;
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <menu+0x64>
		case 2:
			pH();
     d36:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <pH>
			break;
	}
	
	LCD_Clear();
     d3a:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	keyINT_Enable();
     d3e:	0e 94 b9 01 	call	0x372	; 0x372 <keyINT_Enable>
     d42:	08 95       	ret

00000d44 <INT_Init>:


//////////Interrupt
void INT_Init()
{
	DDRD&=~(3<<2);
     d44:	81 b3       	in	r24, 0x11	; 17
     d46:	83 7f       	andi	r24, 0xF3	; 243
     d48:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<2);
     d4a:	82 b3       	in	r24, 0x12	; 18
     d4c:	8b 7f       	andi	r24, 0xFB	; 251
     d4e:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<3);
     d50:	82 b3       	in	r24, 0x12	; 18
     d52:	88 60       	ori	r24, 0x08	; 8
     d54:	82 bb       	out	0x12, r24	; 18
	keyINT_Enable();  
     d56:	0e 94 b9 01 	call	0x372	; 0x372 <keyINT_Enable>
	
	GICR |=(1<<INT0 | 1<<INT1); //Set Bit6 and Bit7 of GICR to unmask INT0 and INT1 interrupt
     d5a:	8b b7       	in	r24, 0x3b	; 59
     d5c:	80 6c       	ori	r24, 0xC0	; 192
     d5e:	8b bf       	out	0x3b, r24	; 59
	MCUCR |=(3<<ISC00 | 2<<ISC10); //Configuring MCUCR for Rising Edge interrupt for INT0 and Falling Edge interrupt INT1
     d60:	85 b7       	in	r24, 0x35	; 53
     d62:	8b 60       	ori	r24, 0x0B	; 11
     d64:	85 bf       	out	0x35, r24	; 53
	sei(); //Enable Global Interrupts
     d66:	78 94       	sei
     d68:	08 95       	ret

00000d6a <__vector_1>:
}


ISR(INT0_vect)
{
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	2f 93       	push	r18
     d76:	3f 93       	push	r19
     d78:	4f 93       	push	r20
     d7a:	5f 93       	push	r21
     d7c:	6f 93       	push	r22
     d7e:	7f 93       	push	r23
     d80:	8f 93       	push	r24
     d82:	9f 93       	push	r25
     d84:	af 93       	push	r26
     d86:	bf 93       	push	r27
     d88:	ef 93       	push	r30
     d8a:	ff 93       	push	r31
	shrdr(0);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <shrdr>
     d94:	2f ef       	ldi	r18, 0xFF	; 255
     d96:	8e e9       	ldi	r24, 0x9E	; 158
     d98:	94 e2       	ldi	r25, 0x24	; 36
     d9a:	21 50       	subi	r18, 0x01	; 1
     d9c:	80 40       	sbci	r24, 0x00	; 0
     d9e:	90 40       	sbci	r25, 0x00	; 0
     da0:	e1 f7       	brne	.-8      	; 0xd9a <__vector_1+0x30>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <__vector_1+0x3a>
     da4:	00 00       	nop
	_delay_ms(3000);
	shrdr(1);
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <shrdr>
}
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	bf 91       	pop	r27
     db4:	af 91       	pop	r26
     db6:	9f 91       	pop	r25
     db8:	8f 91       	pop	r24
     dba:	7f 91       	pop	r23
     dbc:	6f 91       	pop	r22
     dbe:	5f 91       	pop	r21
     dc0:	4f 91       	pop	r20
     dc2:	3f 91       	pop	r19
     dc4:	2f 91       	pop	r18
     dc6:	0f 90       	pop	r0
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	0f 90       	pop	r0
     dcc:	1f 90       	pop	r1
     dce:	18 95       	reti

00000dd0 <__vector_2>:


ISR(INT1_vect)
{
     dd0:	1f 92       	push	r1
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	11 24       	eor	r1, r1
     dda:	2f 93       	push	r18
     ddc:	3f 93       	push	r19
     dde:	4f 93       	push	r20
     de0:	5f 93       	push	r21
     de2:	6f 93       	push	r22
     de4:	7f 93       	push	r23
     de6:	8f 93       	push	r24
     de8:	9f 93       	push	r25
     dea:	af 93       	push	r26
     dec:	bf 93       	push	r27
     dee:	ef 93       	push	r30
     df0:	ff 93       	push	r31
	menu();
     df2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <menu>
}
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <COM_Init>:


////////////components
void COM_Init()
{
	DDRA &= ~(1<<5);
     e18:	8a b3       	in	r24, 0x1a	; 26
     e1a:	8f 7d       	andi	r24, 0xDF	; 223
     e1c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;		//output components direction
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	87 bb       	out	0x17, r24	; 23
	shrdr(1);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <shrdr>
     e2a:	08 95       	ret

00000e2c <main>:


/////////////main
int main(void)
{
	LCD_Init();			/*Initialization of LCD*/
     e2c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Init>
	INT_Init();
     e30:	0e 94 a2 06 	call	0xd44	; 0xd44 <INT_Init>
	COM_Init();
     e34:	0e 94 0c 07 	call	0xe18	; 0xe18 <COM_Init>
	ADC_Init();
     e38:	0e 94 8c 03 	call	0x718	; 0x718 <ADC_Init>
	US_Init();		//Set io port direction of us sensor
     e3c:	0e 94 4c 05 	call	0xa98	; 0xa98 <US_Init>
	
	LCD_String_xy(0,0,">>> WELCOME <<<");
     e40:	4f ee       	ldi	r20, 0xEF	; 239
     e42:	51 e0       	ldi	r21, 0x01	; 1
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
     e4c:	2f ef       	ldi	r18, 0xFF	; 255
     e4e:	89 e6       	ldi	r24, 0x69	; 105
     e50:	98 e1       	ldi	r25, 0x18	; 24
     e52:	21 50       	subi	r18, 0x01	; 1
     e54:	80 40       	sbci	r24, 0x00	; 0
     e56:	90 40       	sbci	r25, 0x00	; 0
     e58:	e1 f7       	brne	.-8      	; 0xe52 <main+0x26>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <main+0x30>
     e5c:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
     e5e:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Clear>
	LCD_String_xy(0,0,"AutomatedCompost");
     e62:	4f ef       	ldi	r20, 0xFF	; 255
     e64:	51 e0       	ldi	r21, 0x01	; 1
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
	LCD_String_xy(1,1,"Making Machine");
     e6e:	40 e1       	ldi	r20, 0x10	; 16
     e70:	52 e0       	ldi	r21, 0x02	; 2
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String_xy>
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	8e e9       	ldi	r24, 0x9E	; 158
     e7e:	94 e2       	ldi	r25, 0x24	; 36
     e80:	21 50       	subi	r18, 0x01	; 1
     e82:	80 40       	sbci	r24, 0x00	; 0
     e84:	90 40       	sbci	r25, 0x00	; 0
     e86:	e1 f7       	brne	.-8      	; 0xe80 <main+0x54>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <main+0x5e>
     e8a:	00 00       	nop
	_delay_ms(3000);
	
	do 
	{
		waterLevel();
     e8c:	0e 94 b4 05 	call	0xb68	; 0xb68 <waterLevel>
	} while (wtrLvl<=15);
     e90:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     e94:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__data_end+0x1>
     e98:	40 97       	sbiw	r24, 0x10	; 16
     e9a:	c4 f3       	brlt	.-16     	; 0xe8c <main+0x60>
	
	
	mixToggle(1);		//initial mix
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 24 03 	call	0x648	; 0x648 <mixToggle>
     ea4:	2f ef       	ldi	r18, 0xFF	; 255
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	9d e3       	ldi	r25, 0x3D	; 61
     eaa:	21 50       	subi	r18, 0x01	; 1
     eac:	80 40       	sbci	r24, 0x00	; 0
     eae:	90 40       	sbci	r25, 0x00	; 0
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <main+0x7e>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <main+0x88>
     eb4:	00 00       	nop
	_delay_ms(5000);
	mixToggle(0);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 24 03 	call	0x648	; 0x648 <mixToggle>
	
	mixConfig();	
     ebe:	0e 94 cc 02 	call	0x598	; 0x598 <mixConfig>
	
	while(1)
	{
		Temp();
     ec2:	0e 94 a6 03 	call	0x74c	; 0x74c <Temp>
		
		if (mixTmrCount%3==0)			//real time for 5mins=90
     ec6:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <mixTmrCount>
     eca:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <mixTmrCount+0x1>
     ece:	63 e0       	ldi	r22, 0x03	; 3
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	0e 94 09 0b 	call	0x1612	; 0x1612 <__divmodhi4>
     ed6:	89 2b       	or	r24, r25
     ed8:	11 f4       	brne	.+4      	; 0xede <main+0xb2>
		{
			Soil();
     eda:	0e 94 59 04 	call	0x8b2	; 0x8b2 <Soil>
		}
		
		waterLevel();
     ede:	0e 94 b4 05 	call	0xb68	; 0xb68 <waterLevel>
		
		mixAndTmrCheck();				//avg program execution time=8s
     ee2:	0e 94 38 03 	call	0x670	; 0x670 <mixAndTmrCheck>
	}
     ee6:	ed cf       	rjmp	.-38     	; 0xec2 <main+0x96>

00000ee8 <__subsf3>:
     ee8:	50 58       	subi	r21, 0x80	; 128

00000eea <__addsf3>:
     eea:	bb 27       	eor	r27, r27
     eec:	aa 27       	eor	r26, r26
     eee:	0e 94 8c 07 	call	0xf18	; 0xf18 <__addsf3x>
     ef2:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_round>
     ef6:	0e 94 cf 08 	call	0x119e	; 0x119e <__fp_pscA>
     efa:	38 f0       	brcs	.+14     	; 0xf0a <__addsf3+0x20>
     efc:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_pscB>
     f00:	20 f0       	brcs	.+8      	; 0xf0a <__addsf3+0x20>
     f02:	39 f4       	brne	.+14     	; 0xf12 <__addsf3+0x28>
     f04:	9f 3f       	cpi	r25, 0xFF	; 255
     f06:	19 f4       	brne	.+6      	; 0xf0e <__addsf3+0x24>
     f08:	26 f4       	brtc	.+8      	; 0xf12 <__addsf3+0x28>
     f0a:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_nan>
     f0e:	0e f4       	brtc	.+2      	; 0xf12 <__addsf3+0x28>
     f10:	e0 95       	com	r30
     f12:	e7 fb       	bst	r30, 7
     f14:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_inf>

00000f18 <__addsf3x>:
     f18:	e9 2f       	mov	r30, r25
     f1a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fp_split3>
     f1e:	58 f3       	brcs	.-42     	; 0xef6 <__addsf3+0xc>
     f20:	ba 17       	cp	r27, r26
     f22:	62 07       	cpc	r22, r18
     f24:	73 07       	cpc	r23, r19
     f26:	84 07       	cpc	r24, r20
     f28:	95 07       	cpc	r25, r21
     f2a:	20 f0       	brcs	.+8      	; 0xf34 <__addsf3x+0x1c>
     f2c:	79 f4       	brne	.+30     	; 0xf4c <__addsf3x+0x34>
     f2e:	a6 f5       	brtc	.+104    	; 0xf98 <__addsf3x+0x80>
     f30:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__fp_zero>
     f34:	0e f4       	brtc	.+2      	; 0xf38 <__addsf3x+0x20>
     f36:	e0 95       	com	r30
     f38:	0b 2e       	mov	r0, r27
     f3a:	ba 2f       	mov	r27, r26
     f3c:	a0 2d       	mov	r26, r0
     f3e:	0b 01       	movw	r0, r22
     f40:	b9 01       	movw	r22, r18
     f42:	90 01       	movw	r18, r0
     f44:	0c 01       	movw	r0, r24
     f46:	ca 01       	movw	r24, r20
     f48:	a0 01       	movw	r20, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	ff 27       	eor	r31, r31
     f4e:	59 1b       	sub	r21, r25
     f50:	99 f0       	breq	.+38     	; 0xf78 <__addsf3x+0x60>
     f52:	59 3f       	cpi	r21, 0xF9	; 249
     f54:	50 f4       	brcc	.+20     	; 0xf6a <__addsf3x+0x52>
     f56:	50 3e       	cpi	r21, 0xE0	; 224
     f58:	68 f1       	brcs	.+90     	; 0xfb4 <__addsf3x+0x9c>
     f5a:	1a 16       	cp	r1, r26
     f5c:	f0 40       	sbci	r31, 0x00	; 0
     f5e:	a2 2f       	mov	r26, r18
     f60:	23 2f       	mov	r18, r19
     f62:	34 2f       	mov	r19, r20
     f64:	44 27       	eor	r20, r20
     f66:	58 5f       	subi	r21, 0xF8	; 248
     f68:	f3 cf       	rjmp	.-26     	; 0xf50 <__addsf3x+0x38>
     f6a:	46 95       	lsr	r20
     f6c:	37 95       	ror	r19
     f6e:	27 95       	ror	r18
     f70:	a7 95       	ror	r26
     f72:	f0 40       	sbci	r31, 0x00	; 0
     f74:	53 95       	inc	r21
     f76:	c9 f7       	brne	.-14     	; 0xf6a <__addsf3x+0x52>
     f78:	7e f4       	brtc	.+30     	; 0xf98 <__addsf3x+0x80>
     f7a:	1f 16       	cp	r1, r31
     f7c:	ba 0b       	sbc	r27, r26
     f7e:	62 0b       	sbc	r22, r18
     f80:	73 0b       	sbc	r23, r19
     f82:	84 0b       	sbc	r24, r20
     f84:	ba f0       	brmi	.+46     	; 0xfb4 <__addsf3x+0x9c>
     f86:	91 50       	subi	r25, 0x01	; 1
     f88:	a1 f0       	breq	.+40     	; 0xfb2 <__addsf3x+0x9a>
     f8a:	ff 0f       	add	r31, r31
     f8c:	bb 1f       	adc	r27, r27
     f8e:	66 1f       	adc	r22, r22
     f90:	77 1f       	adc	r23, r23
     f92:	88 1f       	adc	r24, r24
     f94:	c2 f7       	brpl	.-16     	; 0xf86 <__addsf3x+0x6e>
     f96:	0e c0       	rjmp	.+28     	; 0xfb4 <__addsf3x+0x9c>
     f98:	ba 0f       	add	r27, r26
     f9a:	62 1f       	adc	r22, r18
     f9c:	73 1f       	adc	r23, r19
     f9e:	84 1f       	adc	r24, r20
     fa0:	48 f4       	brcc	.+18     	; 0xfb4 <__addsf3x+0x9c>
     fa2:	87 95       	ror	r24
     fa4:	77 95       	ror	r23
     fa6:	67 95       	ror	r22
     fa8:	b7 95       	ror	r27
     faa:	f7 95       	ror	r31
     fac:	9e 3f       	cpi	r25, 0xFE	; 254
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <__addsf3x+0x9a>
     fb0:	b0 cf       	rjmp	.-160    	; 0xf12 <__addsf3+0x28>
     fb2:	93 95       	inc	r25
     fb4:	88 0f       	add	r24, r24
     fb6:	08 f0       	brcs	.+2      	; 0xfba <__addsf3x+0xa2>
     fb8:	99 27       	eor	r25, r25
     fba:	ee 0f       	add	r30, r30
     fbc:	97 95       	ror	r25
     fbe:	87 95       	ror	r24
     fc0:	08 95       	ret

00000fc2 <__divsf3>:
     fc2:	0e 94 f5 07 	call	0xfea	; 0xfea <__divsf3x>
     fc6:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_round>
     fca:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_pscB>
     fce:	58 f0       	brcs	.+22     	; 0xfe6 <__divsf3+0x24>
     fd0:	0e 94 cf 08 	call	0x119e	; 0x119e <__fp_pscA>
     fd4:	40 f0       	brcs	.+16     	; 0xfe6 <__divsf3+0x24>
     fd6:	29 f4       	brne	.+10     	; 0xfe2 <__divsf3+0x20>
     fd8:	5f 3f       	cpi	r21, 0xFF	; 255
     fda:	29 f0       	breq	.+10     	; 0xfe6 <__divsf3+0x24>
     fdc:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_inf>
     fe0:	51 11       	cpse	r21, r1
     fe2:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_szero>
     fe6:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_nan>

00000fea <__divsf3x>:
     fea:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fp_split3>
     fee:	68 f3       	brcs	.-38     	; 0xfca <__divsf3+0x8>

00000ff0 <__divsf3_pse>:
     ff0:	99 23       	and	r25, r25
     ff2:	b1 f3       	breq	.-20     	; 0xfe0 <__divsf3+0x1e>
     ff4:	55 23       	and	r21, r21
     ff6:	91 f3       	breq	.-28     	; 0xfdc <__divsf3+0x1a>
     ff8:	95 1b       	sub	r25, r21
     ffa:	55 0b       	sbc	r21, r21
     ffc:	bb 27       	eor	r27, r27
     ffe:	aa 27       	eor	r26, r26
    1000:	62 17       	cp	r22, r18
    1002:	73 07       	cpc	r23, r19
    1004:	84 07       	cpc	r24, r20
    1006:	38 f0       	brcs	.+14     	; 0x1016 <__divsf3_pse+0x26>
    1008:	9f 5f       	subi	r25, 0xFF	; 255
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	44 1f       	adc	r20, r20
    1012:	aa 1f       	adc	r26, r26
    1014:	a9 f3       	breq	.-22     	; 0x1000 <__divsf3_pse+0x10>
    1016:	35 d0       	rcall	.+106    	; 0x1082 <__divsf3_pse+0x92>
    1018:	0e 2e       	mov	r0, r30
    101a:	3a f0       	brmi	.+14     	; 0x102a <__divsf3_pse+0x3a>
    101c:	e0 e8       	ldi	r30, 0x80	; 128
    101e:	32 d0       	rcall	.+100    	; 0x1084 <__divsf3_pse+0x94>
    1020:	91 50       	subi	r25, 0x01	; 1
    1022:	50 40       	sbci	r21, 0x00	; 0
    1024:	e6 95       	lsr	r30
    1026:	00 1c       	adc	r0, r0
    1028:	ca f7       	brpl	.-14     	; 0x101c <__divsf3_pse+0x2c>
    102a:	2b d0       	rcall	.+86     	; 0x1082 <__divsf3_pse+0x92>
    102c:	fe 2f       	mov	r31, r30
    102e:	29 d0       	rcall	.+82     	; 0x1082 <__divsf3_pse+0x92>
    1030:	66 0f       	add	r22, r22
    1032:	77 1f       	adc	r23, r23
    1034:	88 1f       	adc	r24, r24
    1036:	bb 1f       	adc	r27, r27
    1038:	26 17       	cp	r18, r22
    103a:	37 07       	cpc	r19, r23
    103c:	48 07       	cpc	r20, r24
    103e:	ab 07       	cpc	r26, r27
    1040:	b0 e8       	ldi	r27, 0x80	; 128
    1042:	09 f0       	breq	.+2      	; 0x1046 <__divsf3_pse+0x56>
    1044:	bb 0b       	sbc	r27, r27
    1046:	80 2d       	mov	r24, r0
    1048:	bf 01       	movw	r22, r30
    104a:	ff 27       	eor	r31, r31
    104c:	93 58       	subi	r25, 0x83	; 131
    104e:	5f 4f       	sbci	r21, 0xFF	; 255
    1050:	3a f0       	brmi	.+14     	; 0x1060 <__divsf3_pse+0x70>
    1052:	9e 3f       	cpi	r25, 0xFE	; 254
    1054:	51 05       	cpc	r21, r1
    1056:	78 f0       	brcs	.+30     	; 0x1076 <__divsf3_pse+0x86>
    1058:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_inf>
    105c:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_szero>
    1060:	5f 3f       	cpi	r21, 0xFF	; 255
    1062:	e4 f3       	brlt	.-8      	; 0x105c <__divsf3_pse+0x6c>
    1064:	98 3e       	cpi	r25, 0xE8	; 232
    1066:	d4 f3       	brlt	.-12     	; 0x105c <__divsf3_pse+0x6c>
    1068:	86 95       	lsr	r24
    106a:	77 95       	ror	r23
    106c:	67 95       	ror	r22
    106e:	b7 95       	ror	r27
    1070:	f7 95       	ror	r31
    1072:	9f 5f       	subi	r25, 0xFF	; 255
    1074:	c9 f7       	brne	.-14     	; 0x1068 <__divsf3_pse+0x78>
    1076:	88 0f       	add	r24, r24
    1078:	91 1d       	adc	r25, r1
    107a:	96 95       	lsr	r25
    107c:	87 95       	ror	r24
    107e:	97 f9       	bld	r25, 7
    1080:	08 95       	ret
    1082:	e1 e0       	ldi	r30, 0x01	; 1
    1084:	66 0f       	add	r22, r22
    1086:	77 1f       	adc	r23, r23
    1088:	88 1f       	adc	r24, r24
    108a:	bb 1f       	adc	r27, r27
    108c:	62 17       	cp	r22, r18
    108e:	73 07       	cpc	r23, r19
    1090:	84 07       	cpc	r24, r20
    1092:	ba 07       	cpc	r27, r26
    1094:	20 f0       	brcs	.+8      	; 0x109e <__divsf3_pse+0xae>
    1096:	62 1b       	sub	r22, r18
    1098:	73 0b       	sbc	r23, r19
    109a:	84 0b       	sbc	r24, r20
    109c:	ba 0b       	sbc	r27, r26
    109e:	ee 1f       	adc	r30, r30
    10a0:	88 f7       	brcc	.-30     	; 0x1084 <__divsf3_pse+0x94>
    10a2:	e0 95       	com	r30
    10a4:	08 95       	ret

000010a6 <__fixsfsi>:
    10a6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fixunssfsi>
    10aa:	68 94       	set
    10ac:	b1 11       	cpse	r27, r1
    10ae:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_szero>
    10b2:	08 95       	ret

000010b4 <__fixunssfsi>:
    10b4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fp_splitA>
    10b8:	88 f0       	brcs	.+34     	; 0x10dc <__fixunssfsi+0x28>
    10ba:	9f 57       	subi	r25, 0x7F	; 127
    10bc:	98 f0       	brcs	.+38     	; 0x10e4 <__fixunssfsi+0x30>
    10be:	b9 2f       	mov	r27, r25
    10c0:	99 27       	eor	r25, r25
    10c2:	b7 51       	subi	r27, 0x17	; 23
    10c4:	b0 f0       	brcs	.+44     	; 0x10f2 <__fixunssfsi+0x3e>
    10c6:	e1 f0       	breq	.+56     	; 0x1100 <__fixunssfsi+0x4c>
    10c8:	66 0f       	add	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	1a f0       	brmi	.+6      	; 0x10d8 <__fixunssfsi+0x24>
    10d2:	ba 95       	dec	r27
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__fixunssfsi+0x14>
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <__fixunssfsi+0x4c>
    10d8:	b1 30       	cpi	r27, 0x01	; 1
    10da:	91 f0       	breq	.+36     	; 0x1100 <__fixunssfsi+0x4c>
    10dc:	0e 94 10 09 	call	0x1220	; 0x1220 <__fp_zero>
    10e0:	b1 e0       	ldi	r27, 0x01	; 1
    10e2:	08 95       	ret
    10e4:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__fp_zero>
    10e8:	67 2f       	mov	r22, r23
    10ea:	78 2f       	mov	r23, r24
    10ec:	88 27       	eor	r24, r24
    10ee:	b8 5f       	subi	r27, 0xF8	; 248
    10f0:	39 f0       	breq	.+14     	; 0x1100 <__fixunssfsi+0x4c>
    10f2:	b9 3f       	cpi	r27, 0xF9	; 249
    10f4:	cc f3       	brlt	.-14     	; 0x10e8 <__fixunssfsi+0x34>
    10f6:	86 95       	lsr	r24
    10f8:	77 95       	ror	r23
    10fa:	67 95       	ror	r22
    10fc:	b3 95       	inc	r27
    10fe:	d9 f7       	brne	.-10     	; 0x10f6 <__fixunssfsi+0x42>
    1100:	3e f4       	brtc	.+14     	; 0x1110 <__fixunssfsi+0x5c>
    1102:	90 95       	com	r25
    1104:	80 95       	com	r24
    1106:	70 95       	com	r23
    1108:	61 95       	neg	r22
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	8f 4f       	sbci	r24, 0xFF	; 255
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	08 95       	ret

00001112 <__floatunsisf>:
    1112:	e8 94       	clt
    1114:	09 c0       	rjmp	.+18     	; 0x1128 <__floatsisf+0x12>

00001116 <__floatsisf>:
    1116:	97 fb       	bst	r25, 7
    1118:	3e f4       	brtc	.+14     	; 0x1128 <__floatsisf+0x12>
    111a:	90 95       	com	r25
    111c:	80 95       	com	r24
    111e:	70 95       	com	r23
    1120:	61 95       	neg	r22
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	99 23       	and	r25, r25
    112a:	a9 f0       	breq	.+42     	; 0x1156 <__floatsisf+0x40>
    112c:	f9 2f       	mov	r31, r25
    112e:	96 e9       	ldi	r25, 0x96	; 150
    1130:	bb 27       	eor	r27, r27
    1132:	93 95       	inc	r25
    1134:	f6 95       	lsr	r31
    1136:	87 95       	ror	r24
    1138:	77 95       	ror	r23
    113a:	67 95       	ror	r22
    113c:	b7 95       	ror	r27
    113e:	f1 11       	cpse	r31, r1
    1140:	f8 cf       	rjmp	.-16     	; 0x1132 <__floatsisf+0x1c>
    1142:	fa f4       	brpl	.+62     	; 0x1182 <__floatsisf+0x6c>
    1144:	bb 0f       	add	r27, r27
    1146:	11 f4       	brne	.+4      	; 0x114c <__floatsisf+0x36>
    1148:	60 ff       	sbrs	r22, 0
    114a:	1b c0       	rjmp	.+54     	; 0x1182 <__floatsisf+0x6c>
    114c:	6f 5f       	subi	r22, 0xFF	; 255
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	8f 4f       	sbci	r24, 0xFF	; 255
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	16 c0       	rjmp	.+44     	; 0x1182 <__floatsisf+0x6c>
    1156:	88 23       	and	r24, r24
    1158:	11 f0       	breq	.+4      	; 0x115e <__floatsisf+0x48>
    115a:	96 e9       	ldi	r25, 0x96	; 150
    115c:	11 c0       	rjmp	.+34     	; 0x1180 <__floatsisf+0x6a>
    115e:	77 23       	and	r23, r23
    1160:	21 f0       	breq	.+8      	; 0x116a <__floatsisf+0x54>
    1162:	9e e8       	ldi	r25, 0x8E	; 142
    1164:	87 2f       	mov	r24, r23
    1166:	76 2f       	mov	r23, r22
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <__floatsisf+0x5e>
    116a:	66 23       	and	r22, r22
    116c:	71 f0       	breq	.+28     	; 0x118a <__floatsisf+0x74>
    116e:	96 e8       	ldi	r25, 0x86	; 134
    1170:	86 2f       	mov	r24, r22
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	2a f0       	brmi	.+10     	; 0x1182 <__floatsisf+0x6c>
    1178:	9a 95       	dec	r25
    117a:	66 0f       	add	r22, r22
    117c:	77 1f       	adc	r23, r23
    117e:	88 1f       	adc	r24, r24
    1180:	da f7       	brpl	.-10     	; 0x1178 <__floatsisf+0x62>
    1182:	88 0f       	add	r24, r24
    1184:	96 95       	lsr	r25
    1186:	87 95       	ror	r24
    1188:	97 f9       	bld	r25, 7
    118a:	08 95       	ret

0000118c <__fp_inf>:
    118c:	97 f9       	bld	r25, 7
    118e:	9f 67       	ori	r25, 0x7F	; 127
    1190:	80 e8       	ldi	r24, 0x80	; 128
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	08 95       	ret

00001198 <__fp_nan>:
    1198:	9f ef       	ldi	r25, 0xFF	; 255
    119a:	80 ec       	ldi	r24, 0xC0	; 192
    119c:	08 95       	ret

0000119e <__fp_pscA>:
    119e:	00 24       	eor	r0, r0
    11a0:	0a 94       	dec	r0
    11a2:	16 16       	cp	r1, r22
    11a4:	17 06       	cpc	r1, r23
    11a6:	18 06       	cpc	r1, r24
    11a8:	09 06       	cpc	r0, r25
    11aa:	08 95       	ret

000011ac <__fp_pscB>:
    11ac:	00 24       	eor	r0, r0
    11ae:	0a 94       	dec	r0
    11b0:	12 16       	cp	r1, r18
    11b2:	13 06       	cpc	r1, r19
    11b4:	14 06       	cpc	r1, r20
    11b6:	05 06       	cpc	r0, r21
    11b8:	08 95       	ret

000011ba <__fp_round>:
    11ba:	09 2e       	mov	r0, r25
    11bc:	03 94       	inc	r0
    11be:	00 0c       	add	r0, r0
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <__fp_round+0xc>
    11c2:	88 23       	and	r24, r24
    11c4:	52 f0       	brmi	.+20     	; 0x11da <__fp_round+0x20>
    11c6:	bb 0f       	add	r27, r27
    11c8:	40 f4       	brcc	.+16     	; 0x11da <__fp_round+0x20>
    11ca:	bf 2b       	or	r27, r31
    11cc:	11 f4       	brne	.+4      	; 0x11d2 <__fp_round+0x18>
    11ce:	60 ff       	sbrs	r22, 0
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <__fp_round+0x20>
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	8f 4f       	sbci	r24, 0xFF	; 255
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
    11da:	08 95       	ret

000011dc <__fp_split3>:
    11dc:	57 fd       	sbrc	r21, 7
    11de:	90 58       	subi	r25, 0x80	; 128
    11e0:	44 0f       	add	r20, r20
    11e2:	55 1f       	adc	r21, r21
    11e4:	59 f0       	breq	.+22     	; 0x11fc <__fp_splitA+0x10>
    11e6:	5f 3f       	cpi	r21, 0xFF	; 255
    11e8:	71 f0       	breq	.+28     	; 0x1206 <__fp_splitA+0x1a>
    11ea:	47 95       	ror	r20

000011ec <__fp_splitA>:
    11ec:	88 0f       	add	r24, r24
    11ee:	97 fb       	bst	r25, 7
    11f0:	99 1f       	adc	r25, r25
    11f2:	61 f0       	breq	.+24     	; 0x120c <__fp_splitA+0x20>
    11f4:	9f 3f       	cpi	r25, 0xFF	; 255
    11f6:	79 f0       	breq	.+30     	; 0x1216 <__fp_splitA+0x2a>
    11f8:	87 95       	ror	r24
    11fa:	08 95       	ret
    11fc:	12 16       	cp	r1, r18
    11fe:	13 06       	cpc	r1, r19
    1200:	14 06       	cpc	r1, r20
    1202:	55 1f       	adc	r21, r21
    1204:	f2 cf       	rjmp	.-28     	; 0x11ea <__fp_split3+0xe>
    1206:	46 95       	lsr	r20
    1208:	f1 df       	rcall	.-30     	; 0x11ec <__fp_splitA>
    120a:	08 c0       	rjmp	.+16     	; 0x121c <__fp_splitA+0x30>
    120c:	16 16       	cp	r1, r22
    120e:	17 06       	cpc	r1, r23
    1210:	18 06       	cpc	r1, r24
    1212:	99 1f       	adc	r25, r25
    1214:	f1 cf       	rjmp	.-30     	; 0x11f8 <__fp_splitA+0xc>
    1216:	86 95       	lsr	r24
    1218:	71 05       	cpc	r23, r1
    121a:	61 05       	cpc	r22, r1
    121c:	08 94       	sec
    121e:	08 95       	ret

00001220 <__fp_zero>:
    1220:	e8 94       	clt

00001222 <__fp_szero>:
    1222:	bb 27       	eor	r27, r27
    1224:	66 27       	eor	r22, r22
    1226:	77 27       	eor	r23, r23
    1228:	cb 01       	movw	r24, r22
    122a:	97 f9       	bld	r25, 7
    122c:	08 95       	ret

0000122e <__mulsf3>:
    122e:	0e 94 2a 09 	call	0x1254	; 0x1254 <__mulsf3x>
    1232:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_round>
    1236:	0e 94 cf 08 	call	0x119e	; 0x119e <__fp_pscA>
    123a:	38 f0       	brcs	.+14     	; 0x124a <__mulsf3+0x1c>
    123c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_pscB>
    1240:	20 f0       	brcs	.+8      	; 0x124a <__mulsf3+0x1c>
    1242:	95 23       	and	r25, r21
    1244:	11 f0       	breq	.+4      	; 0x124a <__mulsf3+0x1c>
    1246:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_inf>
    124a:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_nan>
    124e:	11 24       	eor	r1, r1
    1250:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_szero>

00001254 <__mulsf3x>:
    1254:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fp_split3>
    1258:	70 f3       	brcs	.-36     	; 0x1236 <__mulsf3+0x8>

0000125a <__mulsf3_pse>:
    125a:	95 9f       	mul	r25, r21
    125c:	c1 f3       	breq	.-16     	; 0x124e <__mulsf3+0x20>
    125e:	95 0f       	add	r25, r21
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	55 1f       	adc	r21, r21
    1264:	62 9f       	mul	r22, r18
    1266:	f0 01       	movw	r30, r0
    1268:	72 9f       	mul	r23, r18
    126a:	bb 27       	eor	r27, r27
    126c:	f0 0d       	add	r31, r0
    126e:	b1 1d       	adc	r27, r1
    1270:	63 9f       	mul	r22, r19
    1272:	aa 27       	eor	r26, r26
    1274:	f0 0d       	add	r31, r0
    1276:	b1 1d       	adc	r27, r1
    1278:	aa 1f       	adc	r26, r26
    127a:	64 9f       	mul	r22, r20
    127c:	66 27       	eor	r22, r22
    127e:	b0 0d       	add	r27, r0
    1280:	a1 1d       	adc	r26, r1
    1282:	66 1f       	adc	r22, r22
    1284:	82 9f       	mul	r24, r18
    1286:	22 27       	eor	r18, r18
    1288:	b0 0d       	add	r27, r0
    128a:	a1 1d       	adc	r26, r1
    128c:	62 1f       	adc	r22, r18
    128e:	73 9f       	mul	r23, r19
    1290:	b0 0d       	add	r27, r0
    1292:	a1 1d       	adc	r26, r1
    1294:	62 1f       	adc	r22, r18
    1296:	83 9f       	mul	r24, r19
    1298:	a0 0d       	add	r26, r0
    129a:	61 1d       	adc	r22, r1
    129c:	22 1f       	adc	r18, r18
    129e:	74 9f       	mul	r23, r20
    12a0:	33 27       	eor	r19, r19
    12a2:	a0 0d       	add	r26, r0
    12a4:	61 1d       	adc	r22, r1
    12a6:	23 1f       	adc	r18, r19
    12a8:	84 9f       	mul	r24, r20
    12aa:	60 0d       	add	r22, r0
    12ac:	21 1d       	adc	r18, r1
    12ae:	82 2f       	mov	r24, r18
    12b0:	76 2f       	mov	r23, r22
    12b2:	6a 2f       	mov	r22, r26
    12b4:	11 24       	eor	r1, r1
    12b6:	9f 57       	subi	r25, 0x7F	; 127
    12b8:	50 40       	sbci	r21, 0x00	; 0
    12ba:	9a f0       	brmi	.+38     	; 0x12e2 <__mulsf3_pse+0x88>
    12bc:	f1 f0       	breq	.+60     	; 0x12fa <__mulsf3_pse+0xa0>
    12be:	88 23       	and	r24, r24
    12c0:	4a f0       	brmi	.+18     	; 0x12d4 <__mulsf3_pse+0x7a>
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	bb 1f       	adc	r27, r27
    12c8:	66 1f       	adc	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	88 1f       	adc	r24, r24
    12ce:	91 50       	subi	r25, 0x01	; 1
    12d0:	50 40       	sbci	r21, 0x00	; 0
    12d2:	a9 f7       	brne	.-22     	; 0x12be <__mulsf3_pse+0x64>
    12d4:	9e 3f       	cpi	r25, 0xFE	; 254
    12d6:	51 05       	cpc	r21, r1
    12d8:	80 f0       	brcs	.+32     	; 0x12fa <__mulsf3_pse+0xa0>
    12da:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_inf>
    12de:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_szero>
    12e2:	5f 3f       	cpi	r21, 0xFF	; 255
    12e4:	e4 f3       	brlt	.-8      	; 0x12de <__mulsf3_pse+0x84>
    12e6:	98 3e       	cpi	r25, 0xE8	; 232
    12e8:	d4 f3       	brlt	.-12     	; 0x12de <__mulsf3_pse+0x84>
    12ea:	86 95       	lsr	r24
    12ec:	77 95       	ror	r23
    12ee:	67 95       	ror	r22
    12f0:	b7 95       	ror	r27
    12f2:	f7 95       	ror	r31
    12f4:	e7 95       	ror	r30
    12f6:	9f 5f       	subi	r25, 0xFF	; 255
    12f8:	c1 f7       	brne	.-16     	; 0x12ea <__mulsf3_pse+0x90>
    12fa:	fe 2b       	or	r31, r30
    12fc:	88 0f       	add	r24, r24
    12fe:	91 1d       	adc	r25, r1
    1300:	96 95       	lsr	r25
    1302:	87 95       	ror	r24
    1304:	97 f9       	bld	r25, 7
    1306:	08 95       	ret

00001308 <pow>:
    1308:	fa 01       	movw	r30, r20
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	30 96       	adiw	r30, 0x00	; 0
    1310:	21 05       	cpc	r18, r1
    1312:	31 05       	cpc	r19, r1
    1314:	a1 f1       	breq	.+104    	; 0x137e <pow+0x76>
    1316:	61 15       	cp	r22, r1
    1318:	71 05       	cpc	r23, r1
    131a:	61 f4       	brne	.+24     	; 0x1334 <pow+0x2c>
    131c:	80 38       	cpi	r24, 0x80	; 128
    131e:	bf e3       	ldi	r27, 0x3F	; 63
    1320:	9b 07       	cpc	r25, r27
    1322:	49 f1       	breq	.+82     	; 0x1376 <pow+0x6e>
    1324:	68 94       	set
    1326:	90 38       	cpi	r25, 0x80	; 128
    1328:	81 05       	cpc	r24, r1
    132a:	61 f0       	breq	.+24     	; 0x1344 <pow+0x3c>
    132c:	80 38       	cpi	r24, 0x80	; 128
    132e:	bf ef       	ldi	r27, 0xFF	; 255
    1330:	9b 07       	cpc	r25, r27
    1332:	41 f0       	breq	.+16     	; 0x1344 <pow+0x3c>
    1334:	99 23       	and	r25, r25
    1336:	4a f5       	brpl	.+82     	; 0x138a <pow+0x82>
    1338:	ff 3f       	cpi	r31, 0xFF	; 255
    133a:	e1 05       	cpc	r30, r1
    133c:	31 05       	cpc	r19, r1
    133e:	21 05       	cpc	r18, r1
    1340:	19 f1       	breq	.+70     	; 0x1388 <pow+0x80>
    1342:	e8 94       	clt
    1344:	08 94       	sec
    1346:	e7 95       	ror	r30
    1348:	d9 01       	movw	r26, r18
    134a:	aa 23       	and	r26, r26
    134c:	29 f4       	brne	.+10     	; 0x1358 <pow+0x50>
    134e:	ab 2f       	mov	r26, r27
    1350:	be 2f       	mov	r27, r30
    1352:	f8 5f       	subi	r31, 0xF8	; 248
    1354:	d0 f3       	brcs	.-12     	; 0x134a <pow+0x42>
    1356:	10 c0       	rjmp	.+32     	; 0x1378 <pow+0x70>
    1358:	ff 5f       	subi	r31, 0xFF	; 255
    135a:	70 f4       	brcc	.+28     	; 0x1378 <pow+0x70>
    135c:	a6 95       	lsr	r26
    135e:	e0 f7       	brcc	.-8      	; 0x1358 <pow+0x50>
    1360:	f7 39       	cpi	r31, 0x97	; 151
    1362:	50 f0       	brcs	.+20     	; 0x1378 <pow+0x70>
    1364:	19 f0       	breq	.+6      	; 0x136c <pow+0x64>
    1366:	ff 3a       	cpi	r31, 0xAF	; 175
    1368:	38 f4       	brcc	.+14     	; 0x1378 <pow+0x70>
    136a:	9f 77       	andi	r25, 0x7F	; 127
    136c:	9f 93       	push	r25
    136e:	0d d0       	rcall	.+26     	; 0x138a <pow+0x82>
    1370:	0f 90       	pop	r0
    1372:	07 fc       	sbrc	r0, 7
    1374:	90 58       	subi	r25, 0x80	; 128
    1376:	08 95       	ret
    1378:	46 f0       	brts	.+16     	; 0x138a <pow+0x82>
    137a:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_nan>
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	80 e8       	ldi	r24, 0x80	; 128
    1384:	9f e3       	ldi	r25, 0x3F	; 63
    1386:	08 95       	ret
    1388:	4f e7       	ldi	r20, 0x7F	; 127
    138a:	9f 77       	andi	r25, 0x7F	; 127
    138c:	5f 93       	push	r21
    138e:	4f 93       	push	r20
    1390:	3f 93       	push	r19
    1392:	2f 93       	push	r18
    1394:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <log>
    1398:	2f 91       	pop	r18
    139a:	3f 91       	pop	r19
    139c:	4f 91       	pop	r20
    139e:	5f 91       	pop	r21
    13a0:	0e 94 17 09 	call	0x122e	; 0x122e <__mulsf3>
    13a4:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <exp>
    13a8:	29 f4       	brne	.+10     	; 0x13b4 <pow+0xac>
    13aa:	16 f0       	brts	.+4      	; 0x13b0 <pow+0xa8>
    13ac:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_inf>
    13b0:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__fp_zero>
    13b4:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_nan>

000013b8 <exp>:
    13b8:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fp_splitA>
    13bc:	a8 f3       	brcs	.-22     	; 0x13a8 <pow+0xa0>
    13be:	96 38       	cpi	r25, 0x86	; 134
    13c0:	a0 f7       	brcc	.-24     	; 0x13aa <pow+0xa2>
    13c2:	07 f8       	bld	r0, 7
    13c4:	0f 92       	push	r0
    13c6:	e8 94       	clt
    13c8:	2b e3       	ldi	r18, 0x3B	; 59
    13ca:	3a ea       	ldi	r19, 0xAA	; 170
    13cc:	48 eb       	ldi	r20, 0xB8	; 184
    13ce:	5f e7       	ldi	r21, 0x7F	; 127
    13d0:	0e 94 2d 09 	call	0x125a	; 0x125a <__mulsf3_pse>
    13d4:	0f 92       	push	r0
    13d6:	0f 92       	push	r0
    13d8:	0f 92       	push	r0
    13da:	4d b7       	in	r20, 0x3d	; 61
    13dc:	5e b7       	in	r21, 0x3e	; 62
    13de:	0f 92       	push	r0
    13e0:	0e 94 c7 0a 	call	0x158e	; 0x158e <modf>
    13e4:	e4 e5       	ldi	r30, 0x54	; 84
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	0e 94 0e 0a 	call	0x141c	; 0x141c <__fp_powser>
    13ec:	4f 91       	pop	r20
    13ee:	5f 91       	pop	r21
    13f0:	ef 91       	pop	r30
    13f2:	ff 91       	pop	r31
    13f4:	e5 95       	asr	r30
    13f6:	ee 1f       	adc	r30, r30
    13f8:	ff 1f       	adc	r31, r31
    13fa:	49 f0       	breq	.+18     	; 0x140e <exp+0x56>
    13fc:	fe 57       	subi	r31, 0x7E	; 126
    13fe:	e0 68       	ori	r30, 0x80	; 128
    1400:	44 27       	eor	r20, r20
    1402:	ee 0f       	add	r30, r30
    1404:	44 1f       	adc	r20, r20
    1406:	fa 95       	dec	r31
    1408:	e1 f7       	brne	.-8      	; 0x1402 <exp+0x4a>
    140a:	41 95       	neg	r20
    140c:	55 0b       	sbc	r21, r21
    140e:	0e 94 41 0a 	call	0x1482	; 0x1482 <ldexp>
    1412:	0f 90       	pop	r0
    1414:	07 fe       	sbrs	r0, 7
    1416:	0c 94 35 0a 	jmp	0x146a	; 0x146a <inverse>
    141a:	08 95       	ret

0000141c <__fp_powser>:
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	1f 93       	push	r17
    1422:	0f 93       	push	r16
    1424:	ff 92       	push	r15
    1426:	ef 92       	push	r14
    1428:	df 92       	push	r13
    142a:	7b 01       	movw	r14, r22
    142c:	8c 01       	movw	r16, r24
    142e:	68 94       	set
    1430:	06 c0       	rjmp	.+12     	; 0x143e <__fp_powser+0x22>
    1432:	da 2e       	mov	r13, r26
    1434:	ef 01       	movw	r28, r30
    1436:	0e 94 2a 09 	call	0x1254	; 0x1254 <__mulsf3x>
    143a:	fe 01       	movw	r30, r28
    143c:	e8 94       	clt
    143e:	a5 91       	lpm	r26, Z+
    1440:	25 91       	lpm	r18, Z+
    1442:	35 91       	lpm	r19, Z+
    1444:	45 91       	lpm	r20, Z+
    1446:	55 91       	lpm	r21, Z+
    1448:	a6 f3       	brts	.-24     	; 0x1432 <__fp_powser+0x16>
    144a:	ef 01       	movw	r28, r30
    144c:	0e 94 8c 07 	call	0xf18	; 0xf18 <__addsf3x>
    1450:	fe 01       	movw	r30, r28
    1452:	97 01       	movw	r18, r14
    1454:	a8 01       	movw	r20, r16
    1456:	da 94       	dec	r13
    1458:	69 f7       	brne	.-38     	; 0x1434 <__fp_powser+0x18>
    145a:	df 90       	pop	r13
    145c:	ef 90       	pop	r14
    145e:	ff 90       	pop	r15
    1460:	0f 91       	pop	r16
    1462:	1f 91       	pop	r17
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <inverse>:
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	80 e8       	ldi	r24, 0x80	; 128
    1474:	9f e3       	ldi	r25, 0x3F	; 63
    1476:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__divsf3>
    147a:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_inf>
    147e:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__fp_mpack>

00001482 <ldexp>:
    1482:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fp_splitA>
    1486:	d8 f3       	brcs	.-10     	; 0x147e <inverse+0x14>
    1488:	99 23       	and	r25, r25
    148a:	c9 f3       	breq	.-14     	; 0x147e <inverse+0x14>
    148c:	94 0f       	add	r25, r20
    148e:	51 1d       	adc	r21, r1
    1490:	a3 f3       	brvs	.-24     	; 0x147a <inverse+0x10>
    1492:	91 50       	subi	r25, 0x01	; 1
    1494:	50 40       	sbci	r21, 0x00	; 0
    1496:	94 f0       	brlt	.+36     	; 0x14bc <ldexp+0x3a>
    1498:	59 f0       	breq	.+22     	; 0x14b0 <ldexp+0x2e>
    149a:	88 23       	and	r24, r24
    149c:	32 f0       	brmi	.+12     	; 0x14aa <ldexp+0x28>
    149e:	66 0f       	add	r22, r22
    14a0:	77 1f       	adc	r23, r23
    14a2:	88 1f       	adc	r24, r24
    14a4:	91 50       	subi	r25, 0x01	; 1
    14a6:	50 40       	sbci	r21, 0x00	; 0
    14a8:	c1 f7       	brne	.-16     	; 0x149a <ldexp+0x18>
    14aa:	9e 3f       	cpi	r25, 0xFE	; 254
    14ac:	51 05       	cpc	r21, r1
    14ae:	2c f7       	brge	.-54     	; 0x147a <inverse+0x10>
    14b0:	88 0f       	add	r24, r24
    14b2:	91 1d       	adc	r25, r1
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	97 f9       	bld	r25, 7
    14ba:	08 95       	ret
    14bc:	5f 3f       	cpi	r21, 0xFF	; 255
    14be:	ac f0       	brlt	.+42     	; 0x14ea <ldexp+0x68>
    14c0:	98 3e       	cpi	r25, 0xE8	; 232
    14c2:	9c f0       	brlt	.+38     	; 0x14ea <ldexp+0x68>
    14c4:	bb 27       	eor	r27, r27
    14c6:	86 95       	lsr	r24
    14c8:	77 95       	ror	r23
    14ca:	67 95       	ror	r22
    14cc:	b7 95       	ror	r27
    14ce:	08 f4       	brcc	.+2      	; 0x14d2 <ldexp+0x50>
    14d0:	b1 60       	ori	r27, 0x01	; 1
    14d2:	93 95       	inc	r25
    14d4:	c1 f7       	brne	.-16     	; 0x14c6 <ldexp+0x44>
    14d6:	bb 0f       	add	r27, r27
    14d8:	58 f7       	brcc	.-42     	; 0x14b0 <ldexp+0x2e>
    14da:	11 f4       	brne	.+4      	; 0x14e0 <ldexp+0x5e>
    14dc:	60 ff       	sbrs	r22, 0
    14de:	e8 cf       	rjmp	.-48     	; 0x14b0 <ldexp+0x2e>
    14e0:	6f 5f       	subi	r22, 0xFF	; 255
    14e2:	7f 4f       	sbci	r23, 0xFF	; 255
    14e4:	8f 4f       	sbci	r24, 0xFF	; 255
    14e6:	9f 4f       	sbci	r25, 0xFF	; 255
    14e8:	e3 cf       	rjmp	.-58     	; 0x14b0 <ldexp+0x2e>
    14ea:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_szero>
    14ee:	16 f0       	brts	.+4      	; 0x14f4 <ldexp+0x72>
    14f0:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__fp_mpack>
    14f4:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_nan>
    14f8:	68 94       	set
    14fa:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_inf>

000014fe <log>:
    14fe:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fp_splitA>
    1502:	a8 f3       	brcs	.-22     	; 0x14ee <ldexp+0x6c>
    1504:	99 23       	and	r25, r25
    1506:	c1 f3       	breq	.-16     	; 0x14f8 <ldexp+0x76>
    1508:	ae f3       	brts	.-22     	; 0x14f4 <ldexp+0x72>
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	1f 93       	push	r17
    1510:	0f 93       	push	r16
    1512:	ff 92       	push	r15
    1514:	c9 2f       	mov	r28, r25
    1516:	dd 27       	eor	r29, r29
    1518:	88 23       	and	r24, r24
    151a:	2a f0       	brmi	.+10     	; 0x1526 <log+0x28>
    151c:	21 97       	sbiw	r28, 0x01	; 1
    151e:	66 0f       	add	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	da f7       	brpl	.-10     	; 0x151c <log+0x1e>
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e8       	ldi	r20, 0x80	; 128
    152c:	5f eb       	ldi	r21, 0xBF	; 191
    152e:	9f e3       	ldi	r25, 0x3F	; 63
    1530:	88 39       	cpi	r24, 0x98	; 152
    1532:	20 f0       	brcs	.+8      	; 0x153c <log+0x3e>
    1534:	80 3e       	cpi	r24, 0xE0	; 224
    1536:	38 f0       	brcs	.+14     	; 0x1546 <log+0x48>
    1538:	21 96       	adiw	r28, 0x01	; 1
    153a:	8f 77       	andi	r24, 0x7F	; 127
    153c:	0e 94 75 07 	call	0xeea	; 0xeea <__addsf3>
    1540:	ec e7       	ldi	r30, 0x7C	; 124
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	04 c0       	rjmp	.+8      	; 0x154e <log+0x50>
    1546:	0e 94 75 07 	call	0xeea	; 0xeea <__addsf3>
    154a:	e9 ea       	ldi	r30, 0xA9	; 169
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	0e 94 0e 0a 	call	0x141c	; 0x141c <__fp_powser>
    1552:	8b 01       	movw	r16, r22
    1554:	be 01       	movw	r22, r28
    1556:	ec 01       	movw	r28, r24
    1558:	fb 2e       	mov	r15, r27
    155a:	6f 57       	subi	r22, 0x7F	; 127
    155c:	71 09       	sbc	r23, r1
    155e:	75 95       	asr	r23
    1560:	77 1f       	adc	r23, r23
    1562:	88 0b       	sbc	r24, r24
    1564:	99 0b       	sbc	r25, r25
    1566:	0e 94 8b 08 	call	0x1116	; 0x1116 <__floatsisf>
    156a:	28 e1       	ldi	r18, 0x18	; 24
    156c:	32 e7       	ldi	r19, 0x72	; 114
    156e:	41 e3       	ldi	r20, 0x31	; 49
    1570:	5f e3       	ldi	r21, 0x3F	; 63
    1572:	0e 94 2a 09 	call	0x1254	; 0x1254 <__mulsf3x>
    1576:	af 2d       	mov	r26, r15
    1578:	98 01       	movw	r18, r16
    157a:	ae 01       	movw	r20, r28
    157c:	ff 90       	pop	r15
    157e:	0f 91       	pop	r16
    1580:	1f 91       	pop	r17
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	0e 94 8c 07 	call	0xf18	; 0xf18 <__addsf3x>
    158a:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_round>

0000158e <modf>:
    158e:	fa 01       	movw	r30, r20
    1590:	dc 01       	movw	r26, r24
    1592:	aa 0f       	add	r26, r26
    1594:	bb 1f       	adc	r27, r27
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	bf 57       	subi	r27, 0x7F	; 127
    159c:	28 f4       	brcc	.+10     	; 0x15a8 <modf+0x1a>
    159e:	22 27       	eor	r18, r18
    15a0:	33 27       	eor	r19, r19
    15a2:	44 27       	eor	r20, r20
    15a4:	50 78       	andi	r21, 0x80	; 128
    15a6:	20 c0       	rjmp	.+64     	; 0x15e8 <modf+0x5a>
    15a8:	b7 51       	subi	r27, 0x17	; 23
    15aa:	90 f4       	brcc	.+36     	; 0x15d0 <modf+0x42>
    15ac:	ab 2f       	mov	r26, r27
    15ae:	00 24       	eor	r0, r0
    15b0:	46 95       	lsr	r20
    15b2:	37 95       	ror	r19
    15b4:	27 95       	ror	r18
    15b6:	01 1c       	adc	r0, r1
    15b8:	a3 95       	inc	r26
    15ba:	d2 f3       	brmi	.-12     	; 0x15b0 <modf+0x22>
    15bc:	00 20       	and	r0, r0
    15be:	71 f0       	breq	.+28     	; 0x15dc <modf+0x4e>
    15c0:	22 0f       	add	r18, r18
    15c2:	33 1f       	adc	r19, r19
    15c4:	44 1f       	adc	r20, r20
    15c6:	b3 95       	inc	r27
    15c8:	da f3       	brmi	.-10     	; 0x15c0 <modf+0x32>
    15ca:	0e d0       	rcall	.+28     	; 0x15e8 <modf+0x5a>
    15cc:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__subsf3>
    15d0:	61 30       	cpi	r22, 0x01	; 1
    15d2:	71 05       	cpc	r23, r1
    15d4:	a0 e8       	ldi	r26, 0x80	; 128
    15d6:	8a 07       	cpc	r24, r26
    15d8:	b9 46       	sbci	r27, 0x69	; 105
    15da:	30 f4       	brcc	.+12     	; 0x15e8 <modf+0x5a>
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	66 27       	eor	r22, r22
    15e2:	77 27       	eor	r23, r23
    15e4:	88 27       	eor	r24, r24
    15e6:	90 78       	andi	r25, 0x80	; 128
    15e8:	30 96       	adiw	r30, 0x00	; 0
    15ea:	21 f0       	breq	.+8      	; 0x15f4 <modf+0x66>
    15ec:	20 83       	st	Z, r18
    15ee:	31 83       	std	Z+1, r19	; 0x01
    15f0:	42 83       	std	Z+2, r20	; 0x02
    15f2:	53 83       	std	Z+3, r21	; 0x03
    15f4:	08 95       	ret

000015f6 <__fp_mpack>:
    15f6:	9f 3f       	cpi	r25, 0xFF	; 255
    15f8:	31 f0       	breq	.+12     	; 0x1606 <__fp_mpack_finite+0xc>

000015fa <__fp_mpack_finite>:
    15fa:	91 50       	subi	r25, 0x01	; 1
    15fc:	20 f4       	brcc	.+8      	; 0x1606 <__fp_mpack_finite+0xc>
    15fe:	87 95       	ror	r24
    1600:	77 95       	ror	r23
    1602:	67 95       	ror	r22
    1604:	b7 95       	ror	r27
    1606:	88 0f       	add	r24, r24
    1608:	91 1d       	adc	r25, r1
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	97 f9       	bld	r25, 7
    1610:	08 95       	ret

00001612 <__divmodhi4>:
    1612:	97 fb       	bst	r25, 7
    1614:	07 2e       	mov	r0, r23
    1616:	16 f4       	brtc	.+4      	; 0x161c <__divmodhi4+0xa>
    1618:	00 94       	com	r0
    161a:	07 d0       	rcall	.+14     	; 0x162a <__divmodhi4_neg1>
    161c:	77 fd       	sbrc	r23, 7
    161e:	09 d0       	rcall	.+18     	; 0x1632 <__divmodhi4_neg2>
    1620:	0e 94 1d 0b 	call	0x163a	; 0x163a <__udivmodhi4>
    1624:	07 fc       	sbrc	r0, 7
    1626:	05 d0       	rcall	.+10     	; 0x1632 <__divmodhi4_neg2>
    1628:	3e f4       	brtc	.+14     	; 0x1638 <__divmodhi4_exit>

0000162a <__divmodhi4_neg1>:
    162a:	90 95       	com	r25
    162c:	81 95       	neg	r24
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	08 95       	ret

00001632 <__divmodhi4_neg2>:
    1632:	70 95       	com	r23
    1634:	61 95       	neg	r22
    1636:	7f 4f       	sbci	r23, 0xFF	; 255

00001638 <__divmodhi4_exit>:
    1638:	08 95       	ret

0000163a <__udivmodhi4>:
    163a:	aa 1b       	sub	r26, r26
    163c:	bb 1b       	sub	r27, r27
    163e:	51 e1       	ldi	r21, 0x11	; 17
    1640:	07 c0       	rjmp	.+14     	; 0x1650 <__udivmodhi4_ep>

00001642 <__udivmodhi4_loop>:
    1642:	aa 1f       	adc	r26, r26
    1644:	bb 1f       	adc	r27, r27
    1646:	a6 17       	cp	r26, r22
    1648:	b7 07       	cpc	r27, r23
    164a:	10 f0       	brcs	.+4      	; 0x1650 <__udivmodhi4_ep>
    164c:	a6 1b       	sub	r26, r22
    164e:	b7 0b       	sbc	r27, r23

00001650 <__udivmodhi4_ep>:
    1650:	88 1f       	adc	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	5a 95       	dec	r21
    1656:	a9 f7       	brne	.-22     	; 0x1642 <__udivmodhi4_loop>
    1658:	80 95       	com	r24
    165a:	90 95       	com	r25
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	08 95       	ret

00001662 <dtostrf>:
    1662:	ef 92       	push	r14
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	e8 01       	movw	r28, r16
    166e:	47 fd       	sbrc	r20, 7
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <dtostrf+0x14>
    1672:	34 e0       	ldi	r19, 0x04	; 4
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <dtostrf+0x16>
    1676:	34 e1       	ldi	r19, 0x14	; 20
    1678:	04 2e       	mov	r0, r20
    167a:	00 0c       	add	r0, r0
    167c:	55 0b       	sbc	r21, r21
    167e:	57 ff       	sbrs	r21, 7
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <dtostrf+0x26>
    1682:	51 95       	neg	r21
    1684:	41 95       	neg	r20
    1686:	51 09       	sbc	r21, r1
    1688:	e3 2e       	mov	r14, r19
    168a:	02 2f       	mov	r16, r18
    168c:	24 2f       	mov	r18, r20
    168e:	ae 01       	movw	r20, r28
    1690:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <dtoa_prf>
    1694:	ce 01       	movw	r24, r28
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ef 90       	pop	r14
    16a0:	08 95       	ret

000016a2 <sprintf>:
    16a2:	ae e0       	ldi	r26, 0x0E	; 14
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e7 e5       	ldi	r30, 0x57	; 87
    16a8:	fb e0       	ldi	r31, 0x0B	; 11
    16aa:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__prologue_saves__+0x1c>
    16ae:	0d 89       	ldd	r16, Y+21	; 0x15
    16b0:	1e 89       	ldd	r17, Y+22	; 0x16
    16b2:	86 e0       	ldi	r24, 0x06	; 6
    16b4:	8c 83       	std	Y+4, r24	; 0x04
    16b6:	1a 83       	std	Y+2, r17	; 0x02
    16b8:	09 83       	std	Y+1, r16	; 0x01
    16ba:	8f ef       	ldi	r24, 0xFF	; 255
    16bc:	9f e7       	ldi	r25, 0x7F	; 127
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	ae 01       	movw	r20, r28
    16c4:	47 5e       	subi	r20, 0xE7	; 231
    16c6:	5f 4f       	sbci	r21, 0xFF	; 255
    16c8:	6f 89       	ldd	r22, Y+23	; 0x17
    16ca:	78 8d       	ldd	r23, Y+24	; 0x18
    16cc:	ce 01       	movw	r24, r28
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <vfprintf>
    16d4:	ef 81       	ldd	r30, Y+7	; 0x07
    16d6:	f8 85       	ldd	r31, Y+8	; 0x08
    16d8:	e0 0f       	add	r30, r16
    16da:	f1 1f       	adc	r31, r17
    16dc:	10 82       	st	Z, r1
    16de:	2e 96       	adiw	r28, 0x0e	; 14
    16e0:	e4 e0       	ldi	r30, 0x04	; 4
    16e2:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__epilogue_restores__+0x1c>

000016e6 <vfprintf>:
    16e6:	ab e0       	ldi	r26, 0x0B	; 11
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e9 e7       	ldi	r30, 0x79	; 121
    16ec:	fb e0       	ldi	r31, 0x0B	; 11
    16ee:	0c 94 36 10 	jmp	0x206c	; 0x206c <__prologue_saves__>
    16f2:	6c 01       	movw	r12, r24
    16f4:	7b 01       	movw	r14, r22
    16f6:	8a 01       	movw	r16, r20
    16f8:	fc 01       	movw	r30, r24
    16fa:	17 82       	std	Z+7, r1	; 0x07
    16fc:	16 82       	std	Z+6, r1	; 0x06
    16fe:	83 81       	ldd	r24, Z+3	; 0x03
    1700:	81 ff       	sbrs	r24, 1
    1702:	cc c1       	rjmp	.+920    	; 0x1a9c <vfprintf+0x3b6>
    1704:	ce 01       	movw	r24, r28
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	3c 01       	movw	r6, r24
    170a:	f6 01       	movw	r30, r12
    170c:	93 81       	ldd	r25, Z+3	; 0x03
    170e:	f7 01       	movw	r30, r14
    1710:	93 fd       	sbrc	r25, 3
    1712:	85 91       	lpm	r24, Z+
    1714:	93 ff       	sbrs	r25, 3
    1716:	81 91       	ld	r24, Z+
    1718:	7f 01       	movw	r14, r30
    171a:	88 23       	and	r24, r24
    171c:	09 f4       	brne	.+2      	; 0x1720 <vfprintf+0x3a>
    171e:	ba c1       	rjmp	.+884    	; 0x1a94 <vfprintf+0x3ae>
    1720:	85 32       	cpi	r24, 0x25	; 37
    1722:	39 f4       	brne	.+14     	; 0x1732 <vfprintf+0x4c>
    1724:	93 fd       	sbrc	r25, 3
    1726:	85 91       	lpm	r24, Z+
    1728:	93 ff       	sbrs	r25, 3
    172a:	81 91       	ld	r24, Z+
    172c:	7f 01       	movw	r14, r30
    172e:	85 32       	cpi	r24, 0x25	; 37
    1730:	29 f4       	brne	.+10     	; 0x173c <vfprintf+0x56>
    1732:	b6 01       	movw	r22, r12
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <fputc>
    173a:	e7 cf       	rjmp	.-50     	; 0x170a <vfprintf+0x24>
    173c:	91 2c       	mov	r9, r1
    173e:	21 2c       	mov	r2, r1
    1740:	31 2c       	mov	r3, r1
    1742:	ff e1       	ldi	r31, 0x1F	; 31
    1744:	f3 15       	cp	r31, r3
    1746:	d8 f0       	brcs	.+54     	; 0x177e <vfprintf+0x98>
    1748:	8b 32       	cpi	r24, 0x2B	; 43
    174a:	79 f0       	breq	.+30     	; 0x176a <vfprintf+0x84>
    174c:	38 f4       	brcc	.+14     	; 0x175c <vfprintf+0x76>
    174e:	80 32       	cpi	r24, 0x20	; 32
    1750:	79 f0       	breq	.+30     	; 0x1770 <vfprintf+0x8a>
    1752:	83 32       	cpi	r24, 0x23	; 35
    1754:	a1 f4       	brne	.+40     	; 0x177e <vfprintf+0x98>
    1756:	23 2d       	mov	r18, r3
    1758:	20 61       	ori	r18, 0x10	; 16
    175a:	1d c0       	rjmp	.+58     	; 0x1796 <vfprintf+0xb0>
    175c:	8d 32       	cpi	r24, 0x2D	; 45
    175e:	61 f0       	breq	.+24     	; 0x1778 <vfprintf+0x92>
    1760:	80 33       	cpi	r24, 0x30	; 48
    1762:	69 f4       	brne	.+26     	; 0x177e <vfprintf+0x98>
    1764:	23 2d       	mov	r18, r3
    1766:	21 60       	ori	r18, 0x01	; 1
    1768:	16 c0       	rjmp	.+44     	; 0x1796 <vfprintf+0xb0>
    176a:	83 2d       	mov	r24, r3
    176c:	82 60       	ori	r24, 0x02	; 2
    176e:	38 2e       	mov	r3, r24
    1770:	e3 2d       	mov	r30, r3
    1772:	e4 60       	ori	r30, 0x04	; 4
    1774:	3e 2e       	mov	r3, r30
    1776:	2a c0       	rjmp	.+84     	; 0x17cc <vfprintf+0xe6>
    1778:	f3 2d       	mov	r31, r3
    177a:	f8 60       	ori	r31, 0x08	; 8
    177c:	1d c0       	rjmp	.+58     	; 0x17b8 <vfprintf+0xd2>
    177e:	37 fc       	sbrc	r3, 7
    1780:	2d c0       	rjmp	.+90     	; 0x17dc <vfprintf+0xf6>
    1782:	20 ed       	ldi	r18, 0xD0	; 208
    1784:	28 0f       	add	r18, r24
    1786:	2a 30       	cpi	r18, 0x0A	; 10
    1788:	40 f0       	brcs	.+16     	; 0x179a <vfprintf+0xb4>
    178a:	8e 32       	cpi	r24, 0x2E	; 46
    178c:	b9 f4       	brne	.+46     	; 0x17bc <vfprintf+0xd6>
    178e:	36 fc       	sbrc	r3, 6
    1790:	81 c1       	rjmp	.+770    	; 0x1a94 <vfprintf+0x3ae>
    1792:	23 2d       	mov	r18, r3
    1794:	20 64       	ori	r18, 0x40	; 64
    1796:	32 2e       	mov	r3, r18
    1798:	19 c0       	rjmp	.+50     	; 0x17cc <vfprintf+0xe6>
    179a:	36 fe       	sbrs	r3, 6
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <vfprintf+0xc4>
    179e:	8a e0       	ldi	r24, 0x0A	; 10
    17a0:	98 9e       	mul	r9, r24
    17a2:	20 0d       	add	r18, r0
    17a4:	11 24       	eor	r1, r1
    17a6:	92 2e       	mov	r9, r18
    17a8:	11 c0       	rjmp	.+34     	; 0x17cc <vfprintf+0xe6>
    17aa:	ea e0       	ldi	r30, 0x0A	; 10
    17ac:	2e 9e       	mul	r2, r30
    17ae:	20 0d       	add	r18, r0
    17b0:	11 24       	eor	r1, r1
    17b2:	22 2e       	mov	r2, r18
    17b4:	f3 2d       	mov	r31, r3
    17b6:	f0 62       	ori	r31, 0x20	; 32
    17b8:	3f 2e       	mov	r3, r31
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <vfprintf+0xe6>
    17bc:	8c 36       	cpi	r24, 0x6C	; 108
    17be:	21 f4       	brne	.+8      	; 0x17c8 <vfprintf+0xe2>
    17c0:	83 2d       	mov	r24, r3
    17c2:	80 68       	ori	r24, 0x80	; 128
    17c4:	38 2e       	mov	r3, r24
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <vfprintf+0xe6>
    17c8:	88 36       	cpi	r24, 0x68	; 104
    17ca:	41 f4       	brne	.+16     	; 0x17dc <vfprintf+0xf6>
    17cc:	f7 01       	movw	r30, r14
    17ce:	93 fd       	sbrc	r25, 3
    17d0:	85 91       	lpm	r24, Z+
    17d2:	93 ff       	sbrs	r25, 3
    17d4:	81 91       	ld	r24, Z+
    17d6:	7f 01       	movw	r14, r30
    17d8:	81 11       	cpse	r24, r1
    17da:	b3 cf       	rjmp	.-154    	; 0x1742 <vfprintf+0x5c>
    17dc:	98 2f       	mov	r25, r24
    17de:	9f 7d       	andi	r25, 0xDF	; 223
    17e0:	95 54       	subi	r25, 0x45	; 69
    17e2:	93 30       	cpi	r25, 0x03	; 3
    17e4:	28 f4       	brcc	.+10     	; 0x17f0 <vfprintf+0x10a>
    17e6:	0c 5f       	subi	r16, 0xFC	; 252
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	9f e3       	ldi	r25, 0x3F	; 63
    17ec:	99 83       	std	Y+1, r25	; 0x01
    17ee:	0d c0       	rjmp	.+26     	; 0x180a <vfprintf+0x124>
    17f0:	83 36       	cpi	r24, 0x63	; 99
    17f2:	31 f0       	breq	.+12     	; 0x1800 <vfprintf+0x11a>
    17f4:	83 37       	cpi	r24, 0x73	; 115
    17f6:	71 f0       	breq	.+28     	; 0x1814 <vfprintf+0x12e>
    17f8:	83 35       	cpi	r24, 0x53	; 83
    17fa:	09 f0       	breq	.+2      	; 0x17fe <vfprintf+0x118>
    17fc:	59 c0       	rjmp	.+178    	; 0x18b0 <vfprintf+0x1ca>
    17fe:	21 c0       	rjmp	.+66     	; 0x1842 <vfprintf+0x15c>
    1800:	f8 01       	movw	r30, r16
    1802:	80 81       	ld	r24, Z
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	0e 5f       	subi	r16, 0xFE	; 254
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	88 24       	eor	r8, r8
    180c:	83 94       	inc	r8
    180e:	91 2c       	mov	r9, r1
    1810:	53 01       	movw	r10, r6
    1812:	13 c0       	rjmp	.+38     	; 0x183a <vfprintf+0x154>
    1814:	28 01       	movw	r4, r16
    1816:	f2 e0       	ldi	r31, 0x02	; 2
    1818:	4f 0e       	add	r4, r31
    181a:	51 1c       	adc	r5, r1
    181c:	f8 01       	movw	r30, r16
    181e:	a0 80       	ld	r10, Z
    1820:	b1 80       	ldd	r11, Z+1	; 0x01
    1822:	36 fe       	sbrs	r3, 6
    1824:	03 c0       	rjmp	.+6      	; 0x182c <vfprintf+0x146>
    1826:	69 2d       	mov	r22, r9
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <vfprintf+0x14a>
    182c:	6f ef       	ldi	r22, 0xFF	; 255
    182e:	7f ef       	ldi	r23, 0xFF	; 255
    1830:	c5 01       	movw	r24, r10
    1832:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <strnlen>
    1836:	4c 01       	movw	r8, r24
    1838:	82 01       	movw	r16, r4
    183a:	f3 2d       	mov	r31, r3
    183c:	ff 77       	andi	r31, 0x7F	; 127
    183e:	3f 2e       	mov	r3, r31
    1840:	16 c0       	rjmp	.+44     	; 0x186e <vfprintf+0x188>
    1842:	28 01       	movw	r4, r16
    1844:	22 e0       	ldi	r18, 0x02	; 2
    1846:	42 0e       	add	r4, r18
    1848:	51 1c       	adc	r5, r1
    184a:	f8 01       	movw	r30, r16
    184c:	a0 80       	ld	r10, Z
    184e:	b1 80       	ldd	r11, Z+1	; 0x01
    1850:	36 fe       	sbrs	r3, 6
    1852:	03 c0       	rjmp	.+6      	; 0x185a <vfprintf+0x174>
    1854:	69 2d       	mov	r22, r9
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	02 c0       	rjmp	.+4      	; 0x185e <vfprintf+0x178>
    185a:	6f ef       	ldi	r22, 0xFF	; 255
    185c:	7f ef       	ldi	r23, 0xFF	; 255
    185e:	c5 01       	movw	r24, r10
    1860:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <strnlen_P>
    1864:	4c 01       	movw	r8, r24
    1866:	f3 2d       	mov	r31, r3
    1868:	f0 68       	ori	r31, 0x80	; 128
    186a:	3f 2e       	mov	r3, r31
    186c:	82 01       	movw	r16, r4
    186e:	33 fc       	sbrc	r3, 3
    1870:	1b c0       	rjmp	.+54     	; 0x18a8 <vfprintf+0x1c2>
    1872:	82 2d       	mov	r24, r2
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	88 16       	cp	r8, r24
    1878:	99 06       	cpc	r9, r25
    187a:	b0 f4       	brcc	.+44     	; 0x18a8 <vfprintf+0x1c2>
    187c:	b6 01       	movw	r22, r12
    187e:	80 e2       	ldi	r24, 0x20	; 32
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <fputc>
    1886:	2a 94       	dec	r2
    1888:	f4 cf       	rjmp	.-24     	; 0x1872 <vfprintf+0x18c>
    188a:	f5 01       	movw	r30, r10
    188c:	37 fc       	sbrc	r3, 7
    188e:	85 91       	lpm	r24, Z+
    1890:	37 fe       	sbrs	r3, 7
    1892:	81 91       	ld	r24, Z+
    1894:	5f 01       	movw	r10, r30
    1896:	b6 01       	movw	r22, r12
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <fputc>
    189e:	21 10       	cpse	r2, r1
    18a0:	2a 94       	dec	r2
    18a2:	21 e0       	ldi	r18, 0x01	; 1
    18a4:	82 1a       	sub	r8, r18
    18a6:	91 08       	sbc	r9, r1
    18a8:	81 14       	cp	r8, r1
    18aa:	91 04       	cpc	r9, r1
    18ac:	71 f7       	brne	.-36     	; 0x188a <vfprintf+0x1a4>
    18ae:	e8 c0       	rjmp	.+464    	; 0x1a80 <vfprintf+0x39a>
    18b0:	84 36       	cpi	r24, 0x64	; 100
    18b2:	11 f0       	breq	.+4      	; 0x18b8 <vfprintf+0x1d2>
    18b4:	89 36       	cpi	r24, 0x69	; 105
    18b6:	41 f5       	brne	.+80     	; 0x1908 <vfprintf+0x222>
    18b8:	f8 01       	movw	r30, r16
    18ba:	37 fe       	sbrs	r3, 7
    18bc:	07 c0       	rjmp	.+14     	; 0x18cc <vfprintf+0x1e6>
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	93 81       	ldd	r25, Z+3	; 0x03
    18c6:	0c 5f       	subi	r16, 0xFC	; 252
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	08 c0       	rjmp	.+16     	; 0x18dc <vfprintf+0x1f6>
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	07 2e       	mov	r0, r23
    18d2:	00 0c       	add	r0, r0
    18d4:	88 0b       	sbc	r24, r24
    18d6:	99 0b       	sbc	r25, r25
    18d8:	0e 5f       	subi	r16, 0xFE	; 254
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
    18dc:	f3 2d       	mov	r31, r3
    18de:	ff 76       	andi	r31, 0x6F	; 111
    18e0:	3f 2e       	mov	r3, r31
    18e2:	97 ff       	sbrs	r25, 7
    18e4:	09 c0       	rjmp	.+18     	; 0x18f8 <vfprintf+0x212>
    18e6:	90 95       	com	r25
    18e8:	80 95       	com	r24
    18ea:	70 95       	com	r23
    18ec:	61 95       	neg	r22
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	8f 4f       	sbci	r24, 0xFF	; 255
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	f0 68       	ori	r31, 0x80	; 128
    18f6:	3f 2e       	mov	r3, r31
    18f8:	2a e0       	ldi	r18, 0x0A	; 10
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	a3 01       	movw	r20, r6
    18fe:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__ultoa_invert>
    1902:	88 2e       	mov	r8, r24
    1904:	86 18       	sub	r8, r6
    1906:	45 c0       	rjmp	.+138    	; 0x1992 <vfprintf+0x2ac>
    1908:	85 37       	cpi	r24, 0x75	; 117
    190a:	31 f4       	brne	.+12     	; 0x1918 <vfprintf+0x232>
    190c:	23 2d       	mov	r18, r3
    190e:	2f 7e       	andi	r18, 0xEF	; 239
    1910:	b2 2e       	mov	r11, r18
    1912:	2a e0       	ldi	r18, 0x0A	; 10
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	25 c0       	rjmp	.+74     	; 0x1962 <vfprintf+0x27c>
    1918:	93 2d       	mov	r25, r3
    191a:	99 7f       	andi	r25, 0xF9	; 249
    191c:	b9 2e       	mov	r11, r25
    191e:	8f 36       	cpi	r24, 0x6F	; 111
    1920:	c1 f0       	breq	.+48     	; 0x1952 <vfprintf+0x26c>
    1922:	18 f4       	brcc	.+6      	; 0x192a <vfprintf+0x244>
    1924:	88 35       	cpi	r24, 0x58	; 88
    1926:	79 f0       	breq	.+30     	; 0x1946 <vfprintf+0x260>
    1928:	b5 c0       	rjmp	.+362    	; 0x1a94 <vfprintf+0x3ae>
    192a:	80 37       	cpi	r24, 0x70	; 112
    192c:	19 f0       	breq	.+6      	; 0x1934 <vfprintf+0x24e>
    192e:	88 37       	cpi	r24, 0x78	; 120
    1930:	21 f0       	breq	.+8      	; 0x193a <vfprintf+0x254>
    1932:	b0 c0       	rjmp	.+352    	; 0x1a94 <vfprintf+0x3ae>
    1934:	e9 2f       	mov	r30, r25
    1936:	e0 61       	ori	r30, 0x10	; 16
    1938:	be 2e       	mov	r11, r30
    193a:	b4 fe       	sbrs	r11, 4
    193c:	0d c0       	rjmp	.+26     	; 0x1958 <vfprintf+0x272>
    193e:	fb 2d       	mov	r31, r11
    1940:	f4 60       	ori	r31, 0x04	; 4
    1942:	bf 2e       	mov	r11, r31
    1944:	09 c0       	rjmp	.+18     	; 0x1958 <vfprintf+0x272>
    1946:	34 fe       	sbrs	r3, 4
    1948:	0a c0       	rjmp	.+20     	; 0x195e <vfprintf+0x278>
    194a:	29 2f       	mov	r18, r25
    194c:	26 60       	ori	r18, 0x06	; 6
    194e:	b2 2e       	mov	r11, r18
    1950:	06 c0       	rjmp	.+12     	; 0x195e <vfprintf+0x278>
    1952:	28 e0       	ldi	r18, 0x08	; 8
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <vfprintf+0x27c>
    1958:	20 e1       	ldi	r18, 0x10	; 16
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <vfprintf+0x27c>
    195e:	20 e1       	ldi	r18, 0x10	; 16
    1960:	32 e0       	ldi	r19, 0x02	; 2
    1962:	f8 01       	movw	r30, r16
    1964:	b7 fe       	sbrs	r11, 7
    1966:	07 c0       	rjmp	.+14     	; 0x1976 <vfprintf+0x290>
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	0c 5f       	subi	r16, 0xFC	; 252
    1972:	1f 4f       	sbci	r17, 0xFF	; 255
    1974:	06 c0       	rjmp	.+12     	; 0x1982 <vfprintf+0x29c>
    1976:	60 81       	ld	r22, Z
    1978:	71 81       	ldd	r23, Z+1	; 0x01
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 5f       	subi	r16, 0xFE	; 254
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	a3 01       	movw	r20, r6
    1984:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__ultoa_invert>
    1988:	88 2e       	mov	r8, r24
    198a:	86 18       	sub	r8, r6
    198c:	fb 2d       	mov	r31, r11
    198e:	ff 77       	andi	r31, 0x7F	; 127
    1990:	3f 2e       	mov	r3, r31
    1992:	36 fe       	sbrs	r3, 6
    1994:	0d c0       	rjmp	.+26     	; 0x19b0 <vfprintf+0x2ca>
    1996:	23 2d       	mov	r18, r3
    1998:	2e 7f       	andi	r18, 0xFE	; 254
    199a:	a2 2e       	mov	r10, r18
    199c:	89 14       	cp	r8, r9
    199e:	58 f4       	brcc	.+22     	; 0x19b6 <vfprintf+0x2d0>
    19a0:	34 fe       	sbrs	r3, 4
    19a2:	0b c0       	rjmp	.+22     	; 0x19ba <vfprintf+0x2d4>
    19a4:	32 fc       	sbrc	r3, 2
    19a6:	09 c0       	rjmp	.+18     	; 0x19ba <vfprintf+0x2d4>
    19a8:	83 2d       	mov	r24, r3
    19aa:	8e 7e       	andi	r24, 0xEE	; 238
    19ac:	a8 2e       	mov	r10, r24
    19ae:	05 c0       	rjmp	.+10     	; 0x19ba <vfprintf+0x2d4>
    19b0:	b8 2c       	mov	r11, r8
    19b2:	a3 2c       	mov	r10, r3
    19b4:	03 c0       	rjmp	.+6      	; 0x19bc <vfprintf+0x2d6>
    19b6:	b8 2c       	mov	r11, r8
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <vfprintf+0x2d6>
    19ba:	b9 2c       	mov	r11, r9
    19bc:	a4 fe       	sbrs	r10, 4
    19be:	0f c0       	rjmp	.+30     	; 0x19de <vfprintf+0x2f8>
    19c0:	fe 01       	movw	r30, r28
    19c2:	e8 0d       	add	r30, r8
    19c4:	f1 1d       	adc	r31, r1
    19c6:	80 81       	ld	r24, Z
    19c8:	80 33       	cpi	r24, 0x30	; 48
    19ca:	21 f4       	brne	.+8      	; 0x19d4 <vfprintf+0x2ee>
    19cc:	9a 2d       	mov	r25, r10
    19ce:	99 7e       	andi	r25, 0xE9	; 233
    19d0:	a9 2e       	mov	r10, r25
    19d2:	09 c0       	rjmp	.+18     	; 0x19e6 <vfprintf+0x300>
    19d4:	a2 fe       	sbrs	r10, 2
    19d6:	06 c0       	rjmp	.+12     	; 0x19e4 <vfprintf+0x2fe>
    19d8:	b3 94       	inc	r11
    19da:	b3 94       	inc	r11
    19dc:	04 c0       	rjmp	.+8      	; 0x19e6 <vfprintf+0x300>
    19de:	8a 2d       	mov	r24, r10
    19e0:	86 78       	andi	r24, 0x86	; 134
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <vfprintf+0x300>
    19e4:	b3 94       	inc	r11
    19e6:	a3 fc       	sbrc	r10, 3
    19e8:	11 c0       	rjmp	.+34     	; 0x1a0c <vfprintf+0x326>
    19ea:	a0 fe       	sbrs	r10, 0
    19ec:	06 c0       	rjmp	.+12     	; 0x19fa <vfprintf+0x314>
    19ee:	b2 14       	cp	r11, r2
    19f0:	88 f4       	brcc	.+34     	; 0x1a14 <vfprintf+0x32e>
    19f2:	28 0c       	add	r2, r8
    19f4:	92 2c       	mov	r9, r2
    19f6:	9b 18       	sub	r9, r11
    19f8:	0e c0       	rjmp	.+28     	; 0x1a16 <vfprintf+0x330>
    19fa:	b2 14       	cp	r11, r2
    19fc:	60 f4       	brcc	.+24     	; 0x1a16 <vfprintf+0x330>
    19fe:	b6 01       	movw	r22, r12
    1a00:	80 e2       	ldi	r24, 0x20	; 32
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <fputc>
    1a08:	b3 94       	inc	r11
    1a0a:	f7 cf       	rjmp	.-18     	; 0x19fa <vfprintf+0x314>
    1a0c:	b2 14       	cp	r11, r2
    1a0e:	18 f4       	brcc	.+6      	; 0x1a16 <vfprintf+0x330>
    1a10:	2b 18       	sub	r2, r11
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <vfprintf+0x332>
    1a14:	98 2c       	mov	r9, r8
    1a16:	21 2c       	mov	r2, r1
    1a18:	a4 fe       	sbrs	r10, 4
    1a1a:	10 c0       	rjmp	.+32     	; 0x1a3c <vfprintf+0x356>
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	80 e3       	ldi	r24, 0x30	; 48
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <fputc>
    1a26:	a2 fe       	sbrs	r10, 2
    1a28:	17 c0       	rjmp	.+46     	; 0x1a58 <vfprintf+0x372>
    1a2a:	a1 fc       	sbrc	r10, 1
    1a2c:	03 c0       	rjmp	.+6      	; 0x1a34 <vfprintf+0x34e>
    1a2e:	88 e7       	ldi	r24, 0x78	; 120
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <vfprintf+0x352>
    1a34:	88 e5       	ldi	r24, 0x58	; 88
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	b6 01       	movw	r22, r12
    1a3a:	0c c0       	rjmp	.+24     	; 0x1a54 <vfprintf+0x36e>
    1a3c:	8a 2d       	mov	r24, r10
    1a3e:	86 78       	andi	r24, 0x86	; 134
    1a40:	59 f0       	breq	.+22     	; 0x1a58 <vfprintf+0x372>
    1a42:	a1 fe       	sbrs	r10, 1
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <vfprintf+0x364>
    1a46:	8b e2       	ldi	r24, 0x2B	; 43
    1a48:	01 c0       	rjmp	.+2      	; 0x1a4c <vfprintf+0x366>
    1a4a:	80 e2       	ldi	r24, 0x20	; 32
    1a4c:	a7 fc       	sbrc	r10, 7
    1a4e:	8d e2       	ldi	r24, 0x2D	; 45
    1a50:	b6 01       	movw	r22, r12
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <fputc>
    1a58:	89 14       	cp	r8, r9
    1a5a:	38 f4       	brcc	.+14     	; 0x1a6a <vfprintf+0x384>
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	80 e3       	ldi	r24, 0x30	; 48
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <fputc>
    1a66:	9a 94       	dec	r9
    1a68:	f7 cf       	rjmp	.-18     	; 0x1a58 <vfprintf+0x372>
    1a6a:	8a 94       	dec	r8
    1a6c:	f3 01       	movw	r30, r6
    1a6e:	e8 0d       	add	r30, r8
    1a70:	f1 1d       	adc	r31, r1
    1a72:	80 81       	ld	r24, Z
    1a74:	b6 01       	movw	r22, r12
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <fputc>
    1a7c:	81 10       	cpse	r8, r1
    1a7e:	f5 cf       	rjmp	.-22     	; 0x1a6a <vfprintf+0x384>
    1a80:	22 20       	and	r2, r2
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <vfprintf+0x3a0>
    1a84:	42 ce       	rjmp	.-892    	; 0x170a <vfprintf+0x24>
    1a86:	b6 01       	movw	r22, r12
    1a88:	80 e2       	ldi	r24, 0x20	; 32
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <fputc>
    1a90:	2a 94       	dec	r2
    1a92:	f6 cf       	rjmp	.-20     	; 0x1a80 <vfprintf+0x39a>
    1a94:	f6 01       	movw	r30, r12
    1a96:	86 81       	ldd	r24, Z+6	; 0x06
    1a98:	97 81       	ldd	r25, Z+7	; 0x07
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <vfprintf+0x3ba>
    1a9c:	8f ef       	ldi	r24, 0xFF	; 255
    1a9e:	9f ef       	ldi	r25, 0xFF	; 255
    1aa0:	2b 96       	adiw	r28, 0x0b	; 11
    1aa2:	e2 e1       	ldi	r30, 0x12	; 18
    1aa4:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__epilogue_restores__>

00001aa8 <dtoa_prf>:
    1aa8:	a9 e0       	ldi	r26, 0x09	; 9
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ea e5       	ldi	r30, 0x5A	; 90
    1aae:	fd e0       	ldi	r31, 0x0D	; 13
    1ab0:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__prologue_saves__+0xc>
    1ab4:	6a 01       	movw	r12, r20
    1ab6:	12 2f       	mov	r17, r18
    1ab8:	b0 2e       	mov	r11, r16
    1aba:	2b e3       	ldi	r18, 0x3B	; 59
    1abc:	20 17       	cp	r18, r16
    1abe:	20 f0       	brcs	.+8      	; 0x1ac8 <dtoa_prf+0x20>
    1ac0:	ff 24       	eor	r15, r15
    1ac2:	f3 94       	inc	r15
    1ac4:	f0 0e       	add	r15, r16
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <dtoa_prf+0x24>
    1ac8:	2c e3       	ldi	r18, 0x3C	; 60
    1aca:	f2 2e       	mov	r15, r18
    1acc:	0f 2d       	mov	r16, r15
    1ace:	27 e0       	ldi	r18, 0x07	; 7
    1ad0:	ae 01       	movw	r20, r28
    1ad2:	4f 5f       	subi	r20, 0xFF	; 255
    1ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad6:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__ftoa_engine>
    1ada:	bc 01       	movw	r22, r24
    1adc:	49 81       	ldd	r20, Y+1	; 0x01
    1ade:	84 2f       	mov	r24, r20
    1ae0:	89 70       	andi	r24, 0x09	; 9
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	31 f0       	breq	.+12     	; 0x1af2 <dtoa_prf+0x4a>
    1ae6:	e1 fc       	sbrc	r14, 1
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <dtoa_prf+0x4e>
    1aea:	e0 fe       	sbrs	r14, 0
    1aec:	06 c0       	rjmp	.+12     	; 0x1afa <dtoa_prf+0x52>
    1aee:	90 e2       	ldi	r25, 0x20	; 32
    1af0:	05 c0       	rjmp	.+10     	; 0x1afc <dtoa_prf+0x54>
    1af2:	9d e2       	ldi	r25, 0x2D	; 45
    1af4:	03 c0       	rjmp	.+6      	; 0x1afc <dtoa_prf+0x54>
    1af6:	9b e2       	ldi	r25, 0x2B	; 43
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <dtoa_prf+0x54>
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	5e 2d       	mov	r21, r14
    1afe:	50 71       	andi	r21, 0x10	; 16
    1b00:	43 ff       	sbrs	r20, 3
    1b02:	3c c0       	rjmp	.+120    	; 0x1b7c <dtoa_prf+0xd4>
    1b04:	91 11       	cpse	r25, r1
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <dtoa_prf+0x64>
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <dtoa_prf+0x66>
    1b0c:	84 e0       	ldi	r24, 0x04	; 4
    1b0e:	81 17       	cp	r24, r17
    1b10:	18 f4       	brcc	.+6      	; 0x1b18 <dtoa_prf+0x70>
    1b12:	21 2f       	mov	r18, r17
    1b14:	28 1b       	sub	r18, r24
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <dtoa_prf+0x72>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	51 11       	cpse	r21, r1
    1b1c:	0b c0       	rjmp	.+22     	; 0x1b34 <dtoa_prf+0x8c>
    1b1e:	f6 01       	movw	r30, r12
    1b20:	82 2f       	mov	r24, r18
    1b22:	30 e2       	ldi	r19, 0x20	; 32
    1b24:	88 23       	and	r24, r24
    1b26:	19 f0       	breq	.+6      	; 0x1b2e <dtoa_prf+0x86>
    1b28:	31 93       	st	Z+, r19
    1b2a:	81 50       	subi	r24, 0x01	; 1
    1b2c:	fb cf       	rjmp	.-10     	; 0x1b24 <dtoa_prf+0x7c>
    1b2e:	c2 0e       	add	r12, r18
    1b30:	d1 1c       	adc	r13, r1
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	99 23       	and	r25, r25
    1b36:	29 f0       	breq	.+10     	; 0x1b42 <dtoa_prf+0x9a>
    1b38:	d6 01       	movw	r26, r12
    1b3a:	9c 93       	st	X, r25
    1b3c:	f6 01       	movw	r30, r12
    1b3e:	31 96       	adiw	r30, 0x01	; 1
    1b40:	6f 01       	movw	r12, r30
    1b42:	c6 01       	movw	r24, r12
    1b44:	03 96       	adiw	r24, 0x03	; 3
    1b46:	e2 fe       	sbrs	r14, 2
    1b48:	0a c0       	rjmp	.+20     	; 0x1b5e <dtoa_prf+0xb6>
    1b4a:	3e e4       	ldi	r19, 0x4E	; 78
    1b4c:	d6 01       	movw	r26, r12
    1b4e:	3c 93       	st	X, r19
    1b50:	41 e4       	ldi	r20, 0x41	; 65
    1b52:	11 96       	adiw	r26, 0x01	; 1
    1b54:	4c 93       	st	X, r20
    1b56:	11 97       	sbiw	r26, 0x01	; 1
    1b58:	12 96       	adiw	r26, 0x02	; 2
    1b5a:	3c 93       	st	X, r19
    1b5c:	06 c0       	rjmp	.+12     	; 0x1b6a <dtoa_prf+0xc2>
    1b5e:	3e e6       	ldi	r19, 0x6E	; 110
    1b60:	f6 01       	movw	r30, r12
    1b62:	30 83       	st	Z, r19
    1b64:	41 e6       	ldi	r20, 0x61	; 97
    1b66:	41 83       	std	Z+1, r20	; 0x01
    1b68:	32 83       	std	Z+2, r19	; 0x02
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	32 2f       	mov	r19, r18
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	33 23       	and	r19, r19
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <dtoa_prf+0xce>
    1b74:	42 c0       	rjmp	.+132    	; 0x1bfa <dtoa_prf+0x152>
    1b76:	41 93       	st	Z+, r20
    1b78:	31 50       	subi	r19, 0x01	; 1
    1b7a:	fa cf       	rjmp	.-12     	; 0x1b70 <dtoa_prf+0xc8>
    1b7c:	42 ff       	sbrs	r20, 2
    1b7e:	44 c0       	rjmp	.+136    	; 0x1c08 <dtoa_prf+0x160>
    1b80:	91 11       	cpse	r25, r1
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <dtoa_prf+0xe0>
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <dtoa_prf+0xe2>
    1b88:	84 e0       	ldi	r24, 0x04	; 4
    1b8a:	81 17       	cp	r24, r17
    1b8c:	18 f4       	brcc	.+6      	; 0x1b94 <dtoa_prf+0xec>
    1b8e:	21 2f       	mov	r18, r17
    1b90:	28 1b       	sub	r18, r24
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <dtoa_prf+0xee>
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	51 11       	cpse	r21, r1
    1b98:	0b c0       	rjmp	.+22     	; 0x1bb0 <dtoa_prf+0x108>
    1b9a:	f6 01       	movw	r30, r12
    1b9c:	82 2f       	mov	r24, r18
    1b9e:	30 e2       	ldi	r19, 0x20	; 32
    1ba0:	88 23       	and	r24, r24
    1ba2:	19 f0       	breq	.+6      	; 0x1baa <dtoa_prf+0x102>
    1ba4:	31 93       	st	Z+, r19
    1ba6:	81 50       	subi	r24, 0x01	; 1
    1ba8:	fb cf       	rjmp	.-10     	; 0x1ba0 <dtoa_prf+0xf8>
    1baa:	c2 0e       	add	r12, r18
    1bac:	d1 1c       	adc	r13, r1
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	99 23       	and	r25, r25
    1bb2:	29 f0       	breq	.+10     	; 0x1bbe <dtoa_prf+0x116>
    1bb4:	d6 01       	movw	r26, r12
    1bb6:	9c 93       	st	X, r25
    1bb8:	f6 01       	movw	r30, r12
    1bba:	31 96       	adiw	r30, 0x01	; 1
    1bbc:	6f 01       	movw	r12, r30
    1bbe:	c6 01       	movw	r24, r12
    1bc0:	03 96       	adiw	r24, 0x03	; 3
    1bc2:	e2 fe       	sbrs	r14, 2
    1bc4:	0b c0       	rjmp	.+22     	; 0x1bdc <dtoa_prf+0x134>
    1bc6:	39 e4       	ldi	r19, 0x49	; 73
    1bc8:	d6 01       	movw	r26, r12
    1bca:	3c 93       	st	X, r19
    1bcc:	3e e4       	ldi	r19, 0x4E	; 78
    1bce:	11 96       	adiw	r26, 0x01	; 1
    1bd0:	3c 93       	st	X, r19
    1bd2:	11 97       	sbiw	r26, 0x01	; 1
    1bd4:	36 e4       	ldi	r19, 0x46	; 70
    1bd6:	12 96       	adiw	r26, 0x02	; 2
    1bd8:	3c 93       	st	X, r19
    1bda:	07 c0       	rjmp	.+14     	; 0x1bea <dtoa_prf+0x142>
    1bdc:	39 e6       	ldi	r19, 0x69	; 105
    1bde:	f6 01       	movw	r30, r12
    1be0:	30 83       	st	Z, r19
    1be2:	3e e6       	ldi	r19, 0x6E	; 110
    1be4:	31 83       	std	Z+1, r19	; 0x01
    1be6:	36 e6       	ldi	r19, 0x66	; 102
    1be8:	32 83       	std	Z+2, r19	; 0x02
    1bea:	fc 01       	movw	r30, r24
    1bec:	32 2f       	mov	r19, r18
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	33 23       	and	r19, r19
    1bf2:	19 f0       	breq	.+6      	; 0x1bfa <dtoa_prf+0x152>
    1bf4:	41 93       	st	Z+, r20
    1bf6:	31 50       	subi	r19, 0x01	; 1
    1bf8:	fb cf       	rjmp	.-10     	; 0x1bf0 <dtoa_prf+0x148>
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	e2 0f       	add	r30, r18
    1bfe:	f1 1d       	adc	r31, r1
    1c00:	10 82       	st	Z, r1
    1c02:	8e ef       	ldi	r24, 0xFE	; 254
    1c04:	9f ef       	ldi	r25, 0xFF	; 255
    1c06:	a6 c0       	rjmp	.+332    	; 0x1d54 <dtoa_prf+0x2ac>
    1c08:	21 e0       	ldi	r18, 0x01	; 1
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	91 11       	cpse	r25, r1
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <dtoa_prf+0x16c>
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	16 16       	cp	r1, r22
    1c16:	17 06       	cpc	r1, r23
    1c18:	1c f4       	brge	.+6      	; 0x1c20 <dtoa_prf+0x178>
    1c1a:	fb 01       	movw	r30, r22
    1c1c:	31 96       	adiw	r30, 0x01	; 1
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <dtoa_prf+0x17c>
    1c20:	e1 e0       	ldi	r30, 0x01	; 1
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	2e 0f       	add	r18, r30
    1c26:	3f 1f       	adc	r19, r31
    1c28:	bb 20       	and	r11, r11
    1c2a:	21 f0       	breq	.+8      	; 0x1c34 <dtoa_prf+0x18c>
    1c2c:	eb 2d       	mov	r30, r11
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	31 96       	adiw	r30, 0x01	; 1
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <dtoa_prf+0x190>
    1c34:	e0 e0       	ldi	r30, 0x00	; 0
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	2e 0f       	add	r18, r30
    1c3a:	3f 1f       	adc	r19, r31
    1c3c:	e1 2f       	mov	r30, r17
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	2e 17       	cp	r18, r30
    1c42:	3f 07       	cpc	r19, r31
    1c44:	1c f4       	brge	.+6      	; 0x1c4c <dtoa_prf+0x1a4>
    1c46:	12 1b       	sub	r17, r18
    1c48:	21 2f       	mov	r18, r17
    1c4a:	01 c0       	rjmp	.+2      	; 0x1c4e <dtoa_prf+0x1a6>
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	8e 2d       	mov	r24, r14
    1c50:	88 71       	andi	r24, 0x18	; 24
    1c52:	59 f4       	brne	.+22     	; 0x1c6a <dtoa_prf+0x1c2>
    1c54:	f6 01       	movw	r30, r12
    1c56:	82 2f       	mov	r24, r18
    1c58:	30 e2       	ldi	r19, 0x20	; 32
    1c5a:	88 23       	and	r24, r24
    1c5c:	19 f0       	breq	.+6      	; 0x1c64 <dtoa_prf+0x1bc>
    1c5e:	31 93       	st	Z+, r19
    1c60:	81 50       	subi	r24, 0x01	; 1
    1c62:	fb cf       	rjmp	.-10     	; 0x1c5a <dtoa_prf+0x1b2>
    1c64:	c2 0e       	add	r12, r18
    1c66:	d1 1c       	adc	r13, r1
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	99 23       	and	r25, r25
    1c6c:	29 f0       	breq	.+10     	; 0x1c78 <dtoa_prf+0x1d0>
    1c6e:	d6 01       	movw	r26, r12
    1c70:	9c 93       	st	X, r25
    1c72:	f6 01       	movw	r30, r12
    1c74:	31 96       	adiw	r30, 0x01	; 1
    1c76:	6f 01       	movw	r12, r30
    1c78:	51 11       	cpse	r21, r1
    1c7a:	0b c0       	rjmp	.+22     	; 0x1c92 <dtoa_prf+0x1ea>
    1c7c:	f6 01       	movw	r30, r12
    1c7e:	82 2f       	mov	r24, r18
    1c80:	90 e3       	ldi	r25, 0x30	; 48
    1c82:	88 23       	and	r24, r24
    1c84:	19 f0       	breq	.+6      	; 0x1c8c <dtoa_prf+0x1e4>
    1c86:	91 93       	st	Z+, r25
    1c88:	81 50       	subi	r24, 0x01	; 1
    1c8a:	fb cf       	rjmp	.-10     	; 0x1c82 <dtoa_prf+0x1da>
    1c8c:	c2 0e       	add	r12, r18
    1c8e:	d1 1c       	adc	r13, r1
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	0f 2d       	mov	r16, r15
    1c94:	06 0f       	add	r16, r22
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	34 2f       	mov	r19, r20
    1c9a:	30 71       	andi	r19, 0x10	; 16
    1c9c:	44 ff       	sbrs	r20, 4
    1c9e:	03 c0       	rjmp	.+6      	; 0x1ca6 <dtoa_prf+0x1fe>
    1ca0:	91 33       	cpi	r25, 0x31	; 49
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <dtoa_prf+0x1fe>
    1ca4:	01 50       	subi	r16, 0x01	; 1
    1ca6:	10 16       	cp	r1, r16
    1ca8:	24 f4       	brge	.+8      	; 0x1cb2 <dtoa_prf+0x20a>
    1caa:	09 30       	cpi	r16, 0x09	; 9
    1cac:	18 f0       	brcs	.+6      	; 0x1cb4 <dtoa_prf+0x20c>
    1cae:	08 e0       	ldi	r16, 0x08	; 8
    1cb0:	01 c0       	rjmp	.+2      	; 0x1cb4 <dtoa_prf+0x20c>
    1cb2:	01 e0       	ldi	r16, 0x01	; 1
    1cb4:	ab 01       	movw	r20, r22
    1cb6:	77 ff       	sbrs	r23, 7
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <dtoa_prf+0x216>
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	fb 01       	movw	r30, r22
    1cc0:	e4 1b       	sub	r30, r20
    1cc2:	f5 0b       	sbc	r31, r21
    1cc4:	a1 e0       	ldi	r26, 0x01	; 1
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	ac 0f       	add	r26, r28
    1cca:	bd 1f       	adc	r27, r29
    1ccc:	ea 0f       	add	r30, r26
    1cce:	fb 1f       	adc	r31, r27
    1cd0:	8e e2       	ldi	r24, 0x2E	; 46
    1cd2:	a8 2e       	mov	r10, r24
    1cd4:	4b 01       	movw	r8, r22
    1cd6:	80 1a       	sub	r8, r16
    1cd8:	91 08       	sbc	r9, r1
    1cda:	0b 2d       	mov	r16, r11
    1cdc:	10 e0       	ldi	r17, 0x00	; 0
    1cde:	11 95       	neg	r17
    1ce0:	01 95       	neg	r16
    1ce2:	11 09       	sbc	r17, r1
    1ce4:	4f 3f       	cpi	r20, 0xFF	; 255
    1ce6:	bf ef       	ldi	r27, 0xFF	; 255
    1ce8:	5b 07       	cpc	r21, r27
    1cea:	21 f4       	brne	.+8      	; 0x1cf4 <dtoa_prf+0x24c>
    1cec:	d6 01       	movw	r26, r12
    1cee:	ac 92       	st	X, r10
    1cf0:	11 96       	adiw	r26, 0x01	; 1
    1cf2:	6d 01       	movw	r12, r26
    1cf4:	64 17       	cp	r22, r20
    1cf6:	75 07       	cpc	r23, r21
    1cf8:	2c f0       	brlt	.+10     	; 0x1d04 <dtoa_prf+0x25c>
    1cfa:	84 16       	cp	r8, r20
    1cfc:	95 06       	cpc	r9, r21
    1cfe:	14 f4       	brge	.+4      	; 0x1d04 <dtoa_prf+0x25c>
    1d00:	81 81       	ldd	r24, Z+1	; 0x01
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <dtoa_prf+0x25e>
    1d04:	80 e3       	ldi	r24, 0x30	; 48
    1d06:	41 50       	subi	r20, 0x01	; 1
    1d08:	51 09       	sbc	r21, r1
    1d0a:	31 96       	adiw	r30, 0x01	; 1
    1d0c:	d6 01       	movw	r26, r12
    1d0e:	11 96       	adiw	r26, 0x01	; 1
    1d10:	7d 01       	movw	r14, r26
    1d12:	40 17       	cp	r20, r16
    1d14:	51 07       	cpc	r21, r17
    1d16:	24 f0       	brlt	.+8      	; 0x1d20 <dtoa_prf+0x278>
    1d18:	d6 01       	movw	r26, r12
    1d1a:	8c 93       	st	X, r24
    1d1c:	67 01       	movw	r12, r14
    1d1e:	e2 cf       	rjmp	.-60     	; 0x1ce4 <dtoa_prf+0x23c>
    1d20:	64 17       	cp	r22, r20
    1d22:	75 07       	cpc	r23, r21
    1d24:	39 f4       	brne	.+14     	; 0x1d34 <dtoa_prf+0x28c>
    1d26:	96 33       	cpi	r25, 0x36	; 54
    1d28:	20 f4       	brcc	.+8      	; 0x1d32 <dtoa_prf+0x28a>
    1d2a:	95 33       	cpi	r25, 0x35	; 53
    1d2c:	19 f4       	brne	.+6      	; 0x1d34 <dtoa_prf+0x28c>
    1d2e:	31 11       	cpse	r19, r1
    1d30:	01 c0       	rjmp	.+2      	; 0x1d34 <dtoa_prf+0x28c>
    1d32:	81 e3       	ldi	r24, 0x31	; 49
    1d34:	f6 01       	movw	r30, r12
    1d36:	80 83       	st	Z, r24
    1d38:	f7 01       	movw	r30, r14
    1d3a:	82 2f       	mov	r24, r18
    1d3c:	90 e2       	ldi	r25, 0x20	; 32
    1d3e:	88 23       	and	r24, r24
    1d40:	19 f0       	breq	.+6      	; 0x1d48 <dtoa_prf+0x2a0>
    1d42:	91 93       	st	Z+, r25
    1d44:	81 50       	subi	r24, 0x01	; 1
    1d46:	fb cf       	rjmp	.-10     	; 0x1d3e <dtoa_prf+0x296>
    1d48:	f7 01       	movw	r30, r14
    1d4a:	e2 0f       	add	r30, r18
    1d4c:	f1 1d       	adc	r31, r1
    1d4e:	10 82       	st	Z, r1
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	29 96       	adiw	r28, 0x09	; 9
    1d56:	ec e0       	ldi	r30, 0x0C	; 12
    1d58:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__epilogue_restores__+0xc>

00001d5c <__ftoa_engine>:
    1d5c:	28 30       	cpi	r18, 0x08	; 8
    1d5e:	08 f0       	brcs	.+2      	; 0x1d62 <__ftoa_engine+0x6>
    1d60:	27 e0       	ldi	r18, 0x07	; 7
    1d62:	33 27       	eor	r19, r19
    1d64:	da 01       	movw	r26, r20
    1d66:	99 0f       	add	r25, r25
    1d68:	31 1d       	adc	r19, r1
    1d6a:	87 fd       	sbrc	r24, 7
    1d6c:	91 60       	ori	r25, 0x01	; 1
    1d6e:	00 96       	adiw	r24, 0x00	; 0
    1d70:	61 05       	cpc	r22, r1
    1d72:	71 05       	cpc	r23, r1
    1d74:	39 f4       	brne	.+14     	; 0x1d84 <__ftoa_engine+0x28>
    1d76:	32 60       	ori	r19, 0x02	; 2
    1d78:	2e 5f       	subi	r18, 0xFE	; 254
    1d7a:	3d 93       	st	X+, r19
    1d7c:	30 e3       	ldi	r19, 0x30	; 48
    1d7e:	2a 95       	dec	r18
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <__ftoa_engine+0x1e>
    1d82:	08 95       	ret
    1d84:	9f 3f       	cpi	r25, 0xFF	; 255
    1d86:	30 f0       	brcs	.+12     	; 0x1d94 <__ftoa_engine+0x38>
    1d88:	80 38       	cpi	r24, 0x80	; 128
    1d8a:	71 05       	cpc	r23, r1
    1d8c:	61 05       	cpc	r22, r1
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <__ftoa_engine+0x36>
    1d90:	3c 5f       	subi	r19, 0xFC	; 252
    1d92:	3c 5f       	subi	r19, 0xFC	; 252
    1d94:	3d 93       	st	X+, r19
    1d96:	91 30       	cpi	r25, 0x01	; 1
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <__ftoa_engine+0x40>
    1d9a:	80 68       	ori	r24, 0x80	; 128
    1d9c:	91 1d       	adc	r25, r1
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	1f 93       	push	r17
    1da4:	0f 93       	push	r16
    1da6:	ff 92       	push	r15
    1da8:	ef 92       	push	r14
    1daa:	19 2f       	mov	r17, r25
    1dac:	98 7f       	andi	r25, 0xF8	; 248
    1dae:	96 95       	lsr	r25
    1db0:	e9 2f       	mov	r30, r25
    1db2:	96 95       	lsr	r25
    1db4:	96 95       	lsr	r25
    1db6:	e9 0f       	add	r30, r25
    1db8:	ff 27       	eor	r31, r31
    1dba:	e0 5d       	subi	r30, 0xD0	; 208
    1dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dbe:	99 27       	eor	r25, r25
    1dc0:	33 27       	eor	r19, r19
    1dc2:	ee 24       	eor	r14, r14
    1dc4:	ff 24       	eor	r15, r15
    1dc6:	a7 01       	movw	r20, r14
    1dc8:	e7 01       	movw	r28, r14
    1dca:	05 90       	lpm	r0, Z+
    1dcc:	08 94       	sec
    1dce:	07 94       	ror	r0
    1dd0:	28 f4       	brcc	.+10     	; 0x1ddc <__ftoa_engine+0x80>
    1dd2:	36 0f       	add	r19, r22
    1dd4:	e7 1e       	adc	r14, r23
    1dd6:	f8 1e       	adc	r15, r24
    1dd8:	49 1f       	adc	r20, r25
    1dda:	51 1d       	adc	r21, r1
    1ddc:	66 0f       	add	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	88 1f       	adc	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	06 94       	lsr	r0
    1de6:	a1 f7       	brne	.-24     	; 0x1dd0 <__ftoa_engine+0x74>
    1de8:	05 90       	lpm	r0, Z+
    1dea:	07 94       	ror	r0
    1dec:	28 f4       	brcc	.+10     	; 0x1df8 <__ftoa_engine+0x9c>
    1dee:	e7 0e       	add	r14, r23
    1df0:	f8 1e       	adc	r15, r24
    1df2:	49 1f       	adc	r20, r25
    1df4:	56 1f       	adc	r21, r22
    1df6:	c1 1d       	adc	r28, r1
    1df8:	77 0f       	add	r23, r23
    1dfa:	88 1f       	adc	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	66 1f       	adc	r22, r22
    1e00:	06 94       	lsr	r0
    1e02:	a1 f7       	brne	.-24     	; 0x1dec <__ftoa_engine+0x90>
    1e04:	05 90       	lpm	r0, Z+
    1e06:	07 94       	ror	r0
    1e08:	28 f4       	brcc	.+10     	; 0x1e14 <__ftoa_engine+0xb8>
    1e0a:	f8 0e       	add	r15, r24
    1e0c:	49 1f       	adc	r20, r25
    1e0e:	56 1f       	adc	r21, r22
    1e10:	c7 1f       	adc	r28, r23
    1e12:	d1 1d       	adc	r29, r1
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	66 1f       	adc	r22, r22
    1e1a:	77 1f       	adc	r23, r23
    1e1c:	06 94       	lsr	r0
    1e1e:	a1 f7       	brne	.-24     	; 0x1e08 <__ftoa_engine+0xac>
    1e20:	05 90       	lpm	r0, Z+
    1e22:	07 94       	ror	r0
    1e24:	20 f4       	brcc	.+8      	; 0x1e2e <__ftoa_engine+0xd2>
    1e26:	49 0f       	add	r20, r25
    1e28:	56 1f       	adc	r21, r22
    1e2a:	c7 1f       	adc	r28, r23
    1e2c:	d8 1f       	adc	r29, r24
    1e2e:	99 0f       	add	r25, r25
    1e30:	66 1f       	adc	r22, r22
    1e32:	77 1f       	adc	r23, r23
    1e34:	88 1f       	adc	r24, r24
    1e36:	06 94       	lsr	r0
    1e38:	a9 f7       	brne	.-22     	; 0x1e24 <__ftoa_engine+0xc8>
    1e3a:	84 91       	lpm	r24, Z
    1e3c:	10 95       	com	r17
    1e3e:	17 70       	andi	r17, 0x07	; 7
    1e40:	41 f0       	breq	.+16     	; 0x1e52 <__ftoa_engine+0xf6>
    1e42:	d6 95       	lsr	r29
    1e44:	c7 95       	ror	r28
    1e46:	57 95       	ror	r21
    1e48:	47 95       	ror	r20
    1e4a:	f7 94       	ror	r15
    1e4c:	e7 94       	ror	r14
    1e4e:	1a 95       	dec	r17
    1e50:	c1 f7       	brne	.-16     	; 0x1e42 <__ftoa_engine+0xe6>
    1e52:	e6 ed       	ldi	r30, 0xD6	; 214
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	68 94       	set
    1e58:	15 90       	lpm	r1, Z+
    1e5a:	15 91       	lpm	r17, Z+
    1e5c:	35 91       	lpm	r19, Z+
    1e5e:	65 91       	lpm	r22, Z+
    1e60:	95 91       	lpm	r25, Z+
    1e62:	05 90       	lpm	r0, Z+
    1e64:	7f e2       	ldi	r23, 0x2F	; 47
    1e66:	73 95       	inc	r23
    1e68:	e1 18       	sub	r14, r1
    1e6a:	f1 0a       	sbc	r15, r17
    1e6c:	43 0b       	sbc	r20, r19
    1e6e:	56 0b       	sbc	r21, r22
    1e70:	c9 0b       	sbc	r28, r25
    1e72:	d0 09       	sbc	r29, r0
    1e74:	c0 f7       	brcc	.-16     	; 0x1e66 <__ftoa_engine+0x10a>
    1e76:	e1 0c       	add	r14, r1
    1e78:	f1 1e       	adc	r15, r17
    1e7a:	43 1f       	adc	r20, r19
    1e7c:	56 1f       	adc	r21, r22
    1e7e:	c9 1f       	adc	r28, r25
    1e80:	d0 1d       	adc	r29, r0
    1e82:	7e f4       	brtc	.+30     	; 0x1ea2 <__ftoa_engine+0x146>
    1e84:	70 33       	cpi	r23, 0x30	; 48
    1e86:	11 f4       	brne	.+4      	; 0x1e8c <__ftoa_engine+0x130>
    1e88:	8a 95       	dec	r24
    1e8a:	e6 cf       	rjmp	.-52     	; 0x1e58 <__ftoa_engine+0xfc>
    1e8c:	e8 94       	clt
    1e8e:	01 50       	subi	r16, 0x01	; 1
    1e90:	30 f0       	brcs	.+12     	; 0x1e9e <__ftoa_engine+0x142>
    1e92:	08 0f       	add	r16, r24
    1e94:	0a f4       	brpl	.+2      	; 0x1e98 <__ftoa_engine+0x13c>
    1e96:	00 27       	eor	r16, r16
    1e98:	02 17       	cp	r16, r18
    1e9a:	08 f4       	brcc	.+2      	; 0x1e9e <__ftoa_engine+0x142>
    1e9c:	20 2f       	mov	r18, r16
    1e9e:	23 95       	inc	r18
    1ea0:	02 2f       	mov	r16, r18
    1ea2:	7a 33       	cpi	r23, 0x3A	; 58
    1ea4:	28 f0       	brcs	.+10     	; 0x1eb0 <__ftoa_engine+0x154>
    1ea6:	79 e3       	ldi	r23, 0x39	; 57
    1ea8:	7d 93       	st	X+, r23
    1eaa:	2a 95       	dec	r18
    1eac:	e9 f7       	brne	.-6      	; 0x1ea8 <__ftoa_engine+0x14c>
    1eae:	10 c0       	rjmp	.+32     	; 0x1ed0 <__ftoa_engine+0x174>
    1eb0:	7d 93       	st	X+, r23
    1eb2:	2a 95       	dec	r18
    1eb4:	89 f6       	brne	.-94     	; 0x1e58 <__ftoa_engine+0xfc>
    1eb6:	06 94       	lsr	r0
    1eb8:	97 95       	ror	r25
    1eba:	67 95       	ror	r22
    1ebc:	37 95       	ror	r19
    1ebe:	17 95       	ror	r17
    1ec0:	17 94       	ror	r1
    1ec2:	e1 18       	sub	r14, r1
    1ec4:	f1 0a       	sbc	r15, r17
    1ec6:	43 0b       	sbc	r20, r19
    1ec8:	56 0b       	sbc	r21, r22
    1eca:	c9 0b       	sbc	r28, r25
    1ecc:	d0 09       	sbc	r29, r0
    1ece:	98 f0       	brcs	.+38     	; 0x1ef6 <__ftoa_engine+0x19a>
    1ed0:	23 95       	inc	r18
    1ed2:	7e 91       	ld	r23, -X
    1ed4:	73 95       	inc	r23
    1ed6:	7a 33       	cpi	r23, 0x3A	; 58
    1ed8:	08 f0       	brcs	.+2      	; 0x1edc <__ftoa_engine+0x180>
    1eda:	70 e3       	ldi	r23, 0x30	; 48
    1edc:	7c 93       	st	X, r23
    1ede:	20 13       	cpse	r18, r16
    1ee0:	b8 f7       	brcc	.-18     	; 0x1ed0 <__ftoa_engine+0x174>
    1ee2:	7e 91       	ld	r23, -X
    1ee4:	70 61       	ori	r23, 0x10	; 16
    1ee6:	7d 93       	st	X+, r23
    1ee8:	30 f0       	brcs	.+12     	; 0x1ef6 <__ftoa_engine+0x19a>
    1eea:	83 95       	inc	r24
    1eec:	71 e3       	ldi	r23, 0x31	; 49
    1eee:	7d 93       	st	X+, r23
    1ef0:	70 e3       	ldi	r23, 0x30	; 48
    1ef2:	2a 95       	dec	r18
    1ef4:	e1 f7       	brne	.-8      	; 0x1eee <__ftoa_engine+0x192>
    1ef6:	11 24       	eor	r1, r1
    1ef8:	ef 90       	pop	r14
    1efa:	ff 90       	pop	r15
    1efc:	0f 91       	pop	r16
    1efe:	1f 91       	pop	r17
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	99 27       	eor	r25, r25
    1f06:	87 fd       	sbrc	r24, 7
    1f08:	90 95       	com	r25
    1f0a:	08 95       	ret

00001f0c <strnlen_P>:
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	05 90       	lpm	r0, Z+
    1f10:	61 50       	subi	r22, 0x01	; 1
    1f12:	70 40       	sbci	r23, 0x00	; 0
    1f14:	01 10       	cpse	r0, r1
    1f16:	d8 f7       	brcc	.-10     	; 0x1f0e <strnlen_P+0x2>
    1f18:	80 95       	com	r24
    1f1a:	90 95       	com	r25
    1f1c:	8e 0f       	add	r24, r30
    1f1e:	9f 1f       	adc	r25, r31
    1f20:	08 95       	ret

00001f22 <strnlen>:
    1f22:	fc 01       	movw	r30, r24
    1f24:	61 50       	subi	r22, 0x01	; 1
    1f26:	70 40       	sbci	r23, 0x00	; 0
    1f28:	01 90       	ld	r0, Z+
    1f2a:	01 10       	cpse	r0, r1
    1f2c:	d8 f7       	brcc	.-10     	; 0x1f24 <strnlen+0x2>
    1f2e:	80 95       	com	r24
    1f30:	90 95       	com	r25
    1f32:	8e 0f       	add	r24, r30
    1f34:	9f 1f       	adc	r25, r31
    1f36:	08 95       	ret

00001f38 <fputc>:
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	fb 01       	movw	r30, r22
    1f42:	23 81       	ldd	r18, Z+3	; 0x03
    1f44:	21 fd       	sbrc	r18, 1
    1f46:	03 c0       	rjmp	.+6      	; 0x1f4e <fputc+0x16>
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	9f ef       	ldi	r25, 0xFF	; 255
    1f4c:	2c c0       	rjmp	.+88     	; 0x1fa6 <fputc+0x6e>
    1f4e:	22 ff       	sbrs	r18, 2
    1f50:	16 c0       	rjmp	.+44     	; 0x1f7e <fputc+0x46>
    1f52:	46 81       	ldd	r20, Z+6	; 0x06
    1f54:	57 81       	ldd	r21, Z+7	; 0x07
    1f56:	24 81       	ldd	r18, Z+4	; 0x04
    1f58:	35 81       	ldd	r19, Z+5	; 0x05
    1f5a:	42 17       	cp	r20, r18
    1f5c:	53 07       	cpc	r21, r19
    1f5e:	44 f4       	brge	.+16     	; 0x1f70 <fputc+0x38>
    1f60:	a0 81       	ld	r26, Z
    1f62:	b1 81       	ldd	r27, Z+1	; 0x01
    1f64:	9d 01       	movw	r18, r26
    1f66:	2f 5f       	subi	r18, 0xFF	; 255
    1f68:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6a:	31 83       	std	Z+1, r19	; 0x01
    1f6c:	20 83       	st	Z, r18
    1f6e:	8c 93       	st	X, r24
    1f70:	26 81       	ldd	r18, Z+6	; 0x06
    1f72:	37 81       	ldd	r19, Z+7	; 0x07
    1f74:	2f 5f       	subi	r18, 0xFF	; 255
    1f76:	3f 4f       	sbci	r19, 0xFF	; 255
    1f78:	37 83       	std	Z+7, r19	; 0x07
    1f7a:	26 83       	std	Z+6, r18	; 0x06
    1f7c:	14 c0       	rjmp	.+40     	; 0x1fa6 <fputc+0x6e>
    1f7e:	8b 01       	movw	r16, r22
    1f80:	ec 01       	movw	r28, r24
    1f82:	fb 01       	movw	r30, r22
    1f84:	00 84       	ldd	r0, Z+8	; 0x08
    1f86:	f1 85       	ldd	r31, Z+9	; 0x09
    1f88:	e0 2d       	mov	r30, r0
    1f8a:	09 95       	icall
    1f8c:	89 2b       	or	r24, r25
    1f8e:	e1 f6       	brne	.-72     	; 0x1f48 <fputc+0x10>
    1f90:	d8 01       	movw	r26, r16
    1f92:	16 96       	adiw	r26, 0x06	; 6
    1f94:	8d 91       	ld	r24, X+
    1f96:	9c 91       	ld	r25, X
    1f98:	17 97       	sbiw	r26, 0x07	; 7
    1f9a:	01 96       	adiw	r24, 0x01	; 1
    1f9c:	17 96       	adiw	r26, 0x07	; 7
    1f9e:	9c 93       	st	X, r25
    1fa0:	8e 93       	st	-X, r24
    1fa2:	16 97       	sbiw	r26, 0x06	; 6
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	08 95       	ret

00001fb0 <__ultoa_invert>:
    1fb0:	fa 01       	movw	r30, r20
    1fb2:	aa 27       	eor	r26, r26
    1fb4:	28 30       	cpi	r18, 0x08	; 8
    1fb6:	51 f1       	breq	.+84     	; 0x200c <__ultoa_invert+0x5c>
    1fb8:	20 31       	cpi	r18, 0x10	; 16
    1fba:	81 f1       	breq	.+96     	; 0x201c <__ultoa_invert+0x6c>
    1fbc:	e8 94       	clt
    1fbe:	6f 93       	push	r22
    1fc0:	6e 7f       	andi	r22, 0xFE	; 254
    1fc2:	6e 5f       	subi	r22, 0xFE	; 254
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	af 4f       	sbci	r26, 0xFF	; 255
    1fcc:	b1 e0       	ldi	r27, 0x01	; 1
    1fce:	3e d0       	rcall	.+124    	; 0x204c <__ultoa_invert+0x9c>
    1fd0:	b4 e0       	ldi	r27, 0x04	; 4
    1fd2:	3c d0       	rcall	.+120    	; 0x204c <__ultoa_invert+0x9c>
    1fd4:	67 0f       	add	r22, r23
    1fd6:	78 1f       	adc	r23, r24
    1fd8:	89 1f       	adc	r24, r25
    1fda:	9a 1f       	adc	r25, r26
    1fdc:	a1 1d       	adc	r26, r1
    1fde:	68 0f       	add	r22, r24
    1fe0:	79 1f       	adc	r23, r25
    1fe2:	8a 1f       	adc	r24, r26
    1fe4:	91 1d       	adc	r25, r1
    1fe6:	a1 1d       	adc	r26, r1
    1fe8:	6a 0f       	add	r22, r26
    1fea:	71 1d       	adc	r23, r1
    1fec:	81 1d       	adc	r24, r1
    1fee:	91 1d       	adc	r25, r1
    1ff0:	a1 1d       	adc	r26, r1
    1ff2:	20 d0       	rcall	.+64     	; 0x2034 <__ultoa_invert+0x84>
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <__ultoa_invert+0x48>
    1ff6:	68 94       	set
    1ff8:	3f 91       	pop	r19
    1ffa:	2a e0       	ldi	r18, 0x0A	; 10
    1ffc:	26 9f       	mul	r18, r22
    1ffe:	11 24       	eor	r1, r1
    2000:	30 19       	sub	r19, r0
    2002:	30 5d       	subi	r19, 0xD0	; 208
    2004:	31 93       	st	Z+, r19
    2006:	de f6       	brtc	.-74     	; 0x1fbe <__ultoa_invert+0xe>
    2008:	cf 01       	movw	r24, r30
    200a:	08 95       	ret
    200c:	46 2f       	mov	r20, r22
    200e:	47 70       	andi	r20, 0x07	; 7
    2010:	40 5d       	subi	r20, 0xD0	; 208
    2012:	41 93       	st	Z+, r20
    2014:	b3 e0       	ldi	r27, 0x03	; 3
    2016:	0f d0       	rcall	.+30     	; 0x2036 <__ultoa_invert+0x86>
    2018:	c9 f7       	brne	.-14     	; 0x200c <__ultoa_invert+0x5c>
    201a:	f6 cf       	rjmp	.-20     	; 0x2008 <__ultoa_invert+0x58>
    201c:	46 2f       	mov	r20, r22
    201e:	4f 70       	andi	r20, 0x0F	; 15
    2020:	40 5d       	subi	r20, 0xD0	; 208
    2022:	4a 33       	cpi	r20, 0x3A	; 58
    2024:	18 f0       	brcs	.+6      	; 0x202c <__ultoa_invert+0x7c>
    2026:	49 5d       	subi	r20, 0xD9	; 217
    2028:	31 fd       	sbrc	r19, 1
    202a:	40 52       	subi	r20, 0x20	; 32
    202c:	41 93       	st	Z+, r20
    202e:	02 d0       	rcall	.+4      	; 0x2034 <__ultoa_invert+0x84>
    2030:	a9 f7       	brne	.-22     	; 0x201c <__ultoa_invert+0x6c>
    2032:	ea cf       	rjmp	.-44     	; 0x2008 <__ultoa_invert+0x58>
    2034:	b4 e0       	ldi	r27, 0x04	; 4
    2036:	a6 95       	lsr	r26
    2038:	97 95       	ror	r25
    203a:	87 95       	ror	r24
    203c:	77 95       	ror	r23
    203e:	67 95       	ror	r22
    2040:	ba 95       	dec	r27
    2042:	c9 f7       	brne	.-14     	; 0x2036 <__ultoa_invert+0x86>
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	61 05       	cpc	r22, r1
    2048:	71 05       	cpc	r23, r1
    204a:	08 95       	ret
    204c:	9b 01       	movw	r18, r22
    204e:	ac 01       	movw	r20, r24
    2050:	0a 2e       	mov	r0, r26
    2052:	06 94       	lsr	r0
    2054:	57 95       	ror	r21
    2056:	47 95       	ror	r20
    2058:	37 95       	ror	r19
    205a:	27 95       	ror	r18
    205c:	ba 95       	dec	r27
    205e:	c9 f7       	brne	.-14     	; 0x2052 <__ultoa_invert+0xa2>
    2060:	62 0f       	add	r22, r18
    2062:	73 1f       	adc	r23, r19
    2064:	84 1f       	adc	r24, r20
    2066:	95 1f       	adc	r25, r21
    2068:	a0 1d       	adc	r26, r0
    206a:	08 95       	ret

0000206c <__prologue_saves__>:
    206c:	2f 92       	push	r2
    206e:	3f 92       	push	r3
    2070:	4f 92       	push	r4
    2072:	5f 92       	push	r5
    2074:	6f 92       	push	r6
    2076:	7f 92       	push	r7
    2078:	8f 92       	push	r8
    207a:	9f 92       	push	r9
    207c:	af 92       	push	r10
    207e:	bf 92       	push	r11
    2080:	cf 92       	push	r12
    2082:	df 92       	push	r13
    2084:	ef 92       	push	r14
    2086:	ff 92       	push	r15
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	ca 1b       	sub	r28, r26
    2096:	db 0b       	sbc	r29, r27
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	09 94       	ijmp

000020a4 <__epilogue_restores__>:
    20a4:	2a 88       	ldd	r2, Y+18	; 0x12
    20a6:	39 88       	ldd	r3, Y+17	; 0x11
    20a8:	48 88       	ldd	r4, Y+16	; 0x10
    20aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    20ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    20ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    20b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    20b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    20b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    20b6:	b9 84       	ldd	r11, Y+9	; 0x09
    20b8:	c8 84       	ldd	r12, Y+8	; 0x08
    20ba:	df 80       	ldd	r13, Y+7	; 0x07
    20bc:	ee 80       	ldd	r14, Y+6	; 0x06
    20be:	fd 80       	ldd	r15, Y+5	; 0x05
    20c0:	0c 81       	ldd	r16, Y+4	; 0x04
    20c2:	1b 81       	ldd	r17, Y+3	; 0x03
    20c4:	aa 81       	ldd	r26, Y+2	; 0x02
    20c6:	b9 81       	ldd	r27, Y+1	; 0x01
    20c8:	ce 0f       	add	r28, r30
    20ca:	d1 1d       	adc	r29, r1
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	ed 01       	movw	r28, r26
    20d8:	08 95       	ret

000020da <_exit>:
    20da:	f8 94       	cli

000020dc <__stop_program>:
    20dc:	ff cf       	rjmp	.-2      	; 0x20dc <__stop_program>
